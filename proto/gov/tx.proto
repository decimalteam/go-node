syntax = "proto3";
package gov;

option go_package = "bitbucket.org/decimalteam/go-node/x/gov/types";

import "gogoproto/gogo.proto";
import "gov/gov.proto";

service Msg {
  rpc SubmitProposal(MsgSubmitProposal) returns (MsgSubmitProposalResponse);
  rpc Vote(MsgVote) returns (MsgVoteResponse);
}

message MsgSubmitProposal {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  bytes Proposer = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.jsontag) = "proposer",
    (gogoproto.moretags) = "yaml:\"proposer\""
  ];
  Content Content = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.jsontag) = "content",
    (gogoproto.moretags) = "yaml:\"content\""
  ];
  uint64 VotingStartBlock = 3 [
    (gogoproto.jsontag) = "voting_start_block",
    (gogoproto.moretags) = "yaml:\"voting_start_block\""
  ];
  uint64 VotingEndBlock = 4 [
    (gogoproto.jsontag) = "voting_end_block",
    (gogoproto.moretags) = "yaml:\"voting_end_block\""
  ];
}

message MsgSubmitProposalResponse {}

message MsgVote {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  uint64 ProposalID = 1 [
    (gogoproto.jsontag) = "proposal_id",
    (gogoproto.moretags) = "yaml:\"proposal_id\""
  ];
  bytes Voter = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress",
    (gogoproto.jsontag) = "voter",
    (gogoproto.moretags) = "yaml:\"voter\""
  ];
  // VoteOption
  bytes Option = 3 [
    (gogoproto.jsontag) = "option",
    (gogoproto.moretags) = "yaml:\"option\""
  ];
}

message MsgVoteResponse {}
