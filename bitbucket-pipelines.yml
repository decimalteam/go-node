image: python:3.8.2

definitions:
  steps:
    - step: &build
        name: Build
        image: centos:centos8
        caches:
          - go-src
          - go-pkg
        script:
          - dnf install -y epel-release
          - dnf install -y golang leveldb leveldb-devel snappy
          - dnf groupinstall -y "Development Tools"
          - export GOPATH=~/go
          - PACKAGE_PATH="${GOPATH}/src/bitbucket.org/${BITBUCKET_REPO_FULL_NAME}"
          - mkdir -pv "${PACKAGE_PATH}"
          - tar -cO --exclude-vcs --exclude=bitbucket-pipelines.yml . | tar -xv -C "${PACKAGE_PATH}"
          - export GO111MODULE=on
          - cd "${PACKAGE_PATH}"
          - go get ./...
          - go test ./...
          - make all
          - mkdir ${BITBUCKET_CLONE_DIR}/build
          - cp ${GOPATH}/bin/* ${BITBUCKET_CLONE_DIR}/build
        artifacts:
          - build/deccli
          - build/decd

  deploy-script: &deploy
    caches:
      - pip
    script:
      - MESSAGE=`git log --format=%B -n 1 $BITBUCKET_COMMIT` # getting commit message
      - pip3 install ansible==2.9.8

      - chmod 700 ci-scripts/ansible
      - cd ci-scripts/ansible

      # run update playbook
      - if [[ $MESSAGE == *\[update\]* ]]; then
        ansible-playbook -i "$MASTER_HOSTS, $SLAVE_HOSTS" -e "ansible_user=$USERNAME chain_id=$CHAIN_ID artifacts=$BITBUCKET_CLONE_DIR/build" decimal-nodes-update.yml;
        else echo 0; fi

      # run reset playbook for MASTER HOSTS
      - if [[ $MESSAGE == *\[reset\]* ]]; then
        ansible-playbook -i "$MASTER_HOSTS" -e "ansible_user=$USERNAME mode=master chain_id=$CHAIN_ID artifacts=$BITBUCKET_CLONE_DIR/build persistent_peers=$PERSISTENT_PEERS" decimal-nodes-init.yml;
        else echo 0; fi

      # run reset playbook for EXPLORER HOSTS
      - if [[ $MESSAGE == *\[reset\]* ]]; then
        ansible-playbook -i "$EXPLORER_HOSTS" -e "ansible_user=$USERNAME" decimal-explorer-init.yml;
        else echo 0; fi

      # run reset playbook for SLAVE HOSTS
      - if [[ $MESSAGE == *\[reset\]* ]]; then
        ansible-playbook -i "$SLAVE_HOSTS" -e "ansible_user=$USERNAME mode=slave chain_id=$CHAIN_ID artifacts=$BITBUCKET_CLONE_DIR/build src_genesis=$SRC_GENESIS persistent_peers=$PERSISTENT_PEERS" decimal-nodes-init.yml;
        else echo 0; fi

  deploy-to-repo-script: &deploy_to_repo
    - parallel:
        - step:
          name: Build on Centos 8 (latest)
          image: centos:centos8
          caches:
            - go-src
            - go-pkg
          script:
            - dnf install -y epel-release
            - dnf install -y golang leveldb leveldb-devel snappy
            - dnf groupinstall -y "Development Tools"
            - export GOPATH=~/go
            - PACKAGE_PATH="${GOPATH}/src/bitbucket.org/${BITBUCKET_REPO_FULL_NAME}"
            - mkdir -pv "${PACKAGE_PATH}"
            - tar -cO --exclude-vcs --exclude=bitbucket-pipelines.yml . | tar -xv -C "${PACKAGE_PATH}"
            - export GO111MODULE=on
            - cd "${PACKAGE_PATH}"
            - go get ./...
            - go test ./...
            - make all
            - mkdir ${BITBUCKET_CLONE_DIR}/build
            - cp ${GOPATH}/bin/* ${BITBUCKET_CLONE_DIR}/build
          artifacts:
            - build/deccli
            - build/decd

  caches:
    pip: ~/.cache/pip
    go-src: ~/go/src
    go-pkg: ~/go/pkg

pipelines:
  branches:
    staging:
      - step:
          <<: *build
      - step:
          name: Deploy
          deployment: Staging
          <<: *deploy          

    develop:
      - step:
          <<: *build
      - step:
          name: Deploy
          deployment: Test
          <<: *deploy
      - step:
          trigger: manual
          name: Deploy binary files to repo
          deployment: Test
          <<: *deploy_to_repo     

