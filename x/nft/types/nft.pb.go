// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nft/nft.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Owner struct {
	Address       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=Address,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address" yaml:"address"`
	IDCollections IDCollections                                 `protobuf:"bytes,2,opt,name=IDCollections,proto3,customtype=IDCollections" json:"id_collections" yaml:"id_collections"`
}

func (m *Owner) Reset()      { *m = Owner{} }
func (*Owner) ProtoMessage() {}
func (*Owner) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe8ab7e15b7f0646, []int{0}
}
func (m *Owner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Owner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Owner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Owner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Owner.Merge(m, src)
}
func (m *Owner) XXX_Size() int {
	return m.Size()
}
func (m *Owner) XXX_DiscardUnknown() {
	xxx_messageInfo_Owner.DiscardUnknown(m)
}

var xxx_messageInfo_Owner proto.InternalMessageInfo

type IDCollection struct {
	Denom string            `protobuf:"bytes,1,opt,name=Denom,proto3" json:"denom" yaml:"denom"`
	IDs   SortedStringArray `protobuf:"bytes,2,opt,name=IDs,proto3,customtype=SortedStringArray" json:"ids" yaml:"ids"`
}

func (m *IDCollection) Reset()      { *m = IDCollection{} }
func (*IDCollection) ProtoMessage() {}
func (*IDCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe8ab7e15b7f0646, []int{1}
}
func (m *IDCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDCollection.Merge(m, src)
}
func (m *IDCollection) XXX_Size() int {
	return m.Size()
}
func (m *IDCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_IDCollection.DiscardUnknown(m)
}

var xxx_messageInfo_IDCollection proto.InternalMessageInfo

type BaseNFT struct {
	ID        string                                        `protobuf:"bytes,1,opt,name=ID,proto3" json:"id" yaml:"id"`
	Owners    types.Any                                     `protobuf:"bytes,2,opt,name=Owners,proto3" json:"owners" yaml:"owners"`
	Creator   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=Creator,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator" yaml:"creator"`
	TokenURI  string                                        `protobuf:"bytes,4,opt,name=TokenURI,proto3" json:"token_uri" yaml:"token_uri"`
	Reserve   github_com_cosmos_cosmos_sdk_types.Int        `protobuf:"bytes,5,opt,name=Reserve,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reserve" yaml:"reserve"`
	AllowMint bool                                          `protobuf:"varint,6,opt,name=AllowMint,proto3" json:"allow_mint" yaml:"allow_mint"`
}

func (m *BaseNFT) Reset()      { *m = BaseNFT{} }
func (*BaseNFT) ProtoMessage() {}
func (*BaseNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe8ab7e15b7f0646, []int{2}
}
func (m *BaseNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseNFT.Merge(m, src)
}
func (m *BaseNFT) XXX_Size() int {
	return m.Size()
}
func (m *BaseNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseNFT.DiscardUnknown(m)
}

var xxx_messageInfo_BaseNFT proto.InternalMessageInfo

type NFTpacketData struct {
	Denom   string `protobuf:"bytes,1,opt,name=Denom,proto3" json:"Denom,omitempty"`
	Amount  uint64 `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Sender  string `protobuf:"bytes,3,opt,name=Sender,proto3" json:"Sender,omitempty"`
	String_ string `protobuf:"bytes,4,opt,name=String,proto3" json:"String,omitempty"`
}

func (m *NFTpacketData) Reset()         { *m = NFTpacketData{} }
func (m *NFTpacketData) String() string { return proto.CompactTextString(m) }
func (*NFTpacketData) ProtoMessage()    {}
func (*NFTpacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_fe8ab7e15b7f0646, []int{3}
}
func (m *NFTpacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NFTpacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NFTpacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NFTpacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NFTpacketData.Merge(m, src)
}
func (m *NFTpacketData) XXX_Size() int {
	return m.Size()
}
func (m *NFTpacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_NFTpacketData.DiscardUnknown(m)
}

var xxx_messageInfo_NFTpacketData proto.InternalMessageInfo

func (m *NFTpacketData) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *NFTpacketData) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *NFTpacketData) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *NFTpacketData) GetString_() string {
	if m != nil {
		return m.String_
	}
	return ""
}

func init() {
	proto.RegisterType((*Owner)(nil), "nft.Owner")
	proto.RegisterType((*IDCollection)(nil), "nft.IDCollection")
	proto.RegisterType((*BaseNFT)(nil), "nft.BaseNFT")
	proto.RegisterType((*NFTpacketData)(nil), "nft.NFTpacketData")
}

func init() { proto.RegisterFile("nft/nft.proto", fileDescriptor_fe8ab7e15b7f0646) }

var fileDescriptor_fe8ab7e15b7f0646 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xc1, 0x6a, 0x13, 0x41,
	0x18, 0xc7, 0xb3, 0x49, 0x93, 0x34, 0xd3, 0xa4, 0xd8, 0xb5, 0x4a, 0xda, 0x43, 0xa6, 0x4e, 0x41,
	0x7a, 0xc9, 0x2e, 0xe8, 0x2d, 0x20, 0x34, 0x69, 0xa8, 0x04, 0xb1, 0xc2, 0xb4, 0x5e, 0x44, 0x08,
	0x9b, 0xdd, 0xc9, 0xba, 0x74, 0x77, 0xa6, 0xec, 0x4e, 0xac, 0x79, 0x03, 0x6f, 0x7a, 0xf4, 0xd8,
	0x87, 0xf0, 0x21, 0x8a, 0xa7, 0x1e, 0xc5, 0xc3, 0x20, 0xcd, 0x45, 0x16, 0xbc, 0xec, 0x13, 0xc8,
	0xce, 0xcc, 0x36, 0xe6, 0x26, 0x78, 0xca, 0x7e, 0xff, 0xd9, 0xef, 0xff, 0xfd, 0x76, 0xfe, 0x1f,
	0x01, 0x2d, 0x3a, 0xe5, 0x36, 0x9d, 0x72, 0xeb, 0x22, 0x66, 0x9c, 0x99, 0x15, 0x3a, 0xe5, 0xbb,
	0x3b, 0x2e, 0x4b, 0x22, 0x96, 0x8c, 0xa5, 0x64, 0xab, 0x42, 0x9d, 0xef, 0x6e, 0xfb, 0xcc, 0x67,
	0x4a, 0xcf, 0x9f, 0xb4, 0xba, 0xe3, 0x33, 0xe6, 0x87, 0xc4, 0x96, 0xd5, 0x64, 0x36, 0xb5, 0x1d,
	0x3a, 0x57, 0x47, 0x68, 0x61, 0x80, 0xea, 0xab, 0x4b, 0x4a, 0x62, 0x33, 0x04, 0xf5, 0xbe, 0xe7,
	0xc5, 0x24, 0x49, 0xda, 0xc6, 0x9e, 0x71, 0xd0, 0x1c, 0xe0, 0x6b, 0x01, 0x4b, 0x3f, 0x04, 0xec,
	0xfa, 0x01, 0x7f, 0x37, 0x9b, 0x58, 0x2e, 0x8b, 0xf4, 0x30, 0xfd, 0xd3, 0x4d, 0xbc, 0x73, 0x9b,
	0xcf, 0x2f, 0x48, 0x62, 0xf5, 0x5d, 0x57, 0x37, 0xa7, 0x02, 0xd6, 0x1d, 0xf5, 0x98, 0x09, 0xb8,
	0x39, 0x77, 0xa2, 0xb0, 0x87, 0xb4, 0x80, 0x70, 0x31, 0xc2, 0x9c, 0x82, 0xd6, 0x68, 0x78, 0xc4,
	0xc2, 0x90, 0xb8, 0x3c, 0x60, 0x34, 0x69, 0x97, 0xe5, 0xcc, 0x43, 0x3d, 0x73, 0xf5, 0x30, 0x15,
	0x70, 0x33, 0xf0, 0xc6, 0xee, 0x52, 0xc9, 0x04, 0x7c, 0xa0, 0xac, 0x57, 0x75, 0x84, 0x57, 0x3b,
	0x7b, 0x6b, 0x5f, 0xae, 0x60, 0x09, 0x7d, 0x32, 0x40, 0xf3, 0x6f, 0xdd, 0xb4, 0x41, 0x75, 0x48,
	0x28, 0x8b, 0xe4, 0xa7, 0x36, 0x06, 0x3b, 0xa9, 0x80, 0x55, 0x2f, 0x17, 0x32, 0x01, 0x9b, 0xca,
	0x58, 0x96, 0x08, 0xab, 0xf7, 0xcc, 0x43, 0x50, 0x19, 0x0d, 0x0b, 0x4a, 0x4b, 0x53, 0x6e, 0x9d,
	0xb2, 0x98, 0x13, 0xef, 0x94, 0xc7, 0x01, 0xf5, 0xfb, 0x71, 0xec, 0xcc, 0x53, 0x01, 0x2b, 0x81,
	0x97, 0xe3, 0x81, 0x02, 0x2f, 0x41, 0x38, 0x6f, 0xed, 0x35, 0x3f, 0x5e, 0xc1, 0x52, 0x4e, 0xf3,
	0x2b, 0x27, 0xfa, 0x5d, 0x01, 0xf5, 0x81, 0x93, 0x90, 0x93, 0xe3, 0x33, 0x73, 0x1f, 0x94, 0x47,
	0x43, 0x4d, 0x72, 0x3f, 0x15, 0xb0, 0x1c, 0x78, 0x99, 0x80, 0x8d, 0xc2, 0x00, 0xe1, 0xf2, 0x68,
	0x68, 0xbe, 0x05, 0x35, 0x99, 0x93, 0x62, 0xd8, 0x78, 0xb2, 0x6d, 0xa9, 0x50, 0xad, 0x22, 0x54,
	0xab, 0x4f, 0xe7, 0x8a, 0x2c, 0x15, 0xb0, 0xc6, 0xe4, 0xbb, 0x99, 0x80, 0x2d, 0x65, 0xa3, 0x6a,
	0xf4, 0xed, 0x6b, 0x77, 0xe3, 0x8c, 0x9d, 0x13, 0xaa, 0xbc, 0xb0, 0xf6, 0xcc, 0xc3, 0x3f, 0x8a,
	0x89, 0xc3, 0x59, 0xdc, 0xae, 0xfc, 0x67, 0xf8, 0xae, 0xf2, 0x59, 0x86, 0xaf, 0x05, 0x84, 0x8b,
	0x11, 0xe6, 0x33, 0xb0, 0x2e, 0x21, 0x5e, 0xe3, 0x51, 0x7b, 0x4d, 0x7e, 0xf6, 0xa3, 0x54, 0xc0,
	0x06, 0xcf, 0xb5, 0xf1, 0x2c, 0x0e, 0x32, 0x01, 0xef, 0xa9, 0xde, 0x3b, 0x09, 0xe1, 0xbb, 0x16,
	0x93, 0x80, 0x3a, 0x26, 0x09, 0x89, 0xdf, 0x93, 0x76, 0x55, 0xc2, 0xbe, 0xd0, 0xb0, 0x8f, 0xff,
	0x01, 0x76, 0x44, 0x79, 0x4e, 0x19, 0x2b, 0x83, 0x25, 0xa5, 0x16, 0x10, 0x2e, 0xbc, 0xcd, 0x3e,
	0x68, 0xf4, 0xc3, 0x90, 0x5d, 0xbe, 0x0c, 0x28, 0x6f, 0xd7, 0xf6, 0x8c, 0x83, 0xf5, 0xc1, 0x7e,
	0x2a, 0x20, 0x70, 0x72, 0x71, 0x1c, 0x05, 0x94, 0x67, 0x02, 0x6e, 0xe9, 0x05, 0xbf, 0xd3, 0x10,
	0x5e, 0x76, 0xf5, 0xd6, 0x8b, 0xcc, 0x51, 0x04, 0x5a, 0x27, 0xc7, 0x67, 0x17, 0x8e, 0x7b, 0x4e,
	0xf8, 0xd0, 0xe1, 0x8e, 0xb9, 0xbd, 0xb2, 0x81, 0xc5, 0x9a, 0x3d, 0x04, 0xb5, 0x7e, 0xc4, 0x66,
	0x94, 0xcb, 0x94, 0xd7, 0xb0, 0xae, 0x72, 0xfd, 0x94, 0x50, 0x8f, 0xa8, 0x78, 0x1a, 0x58, 0x57,
	0x52, 0x97, 0xdb, 0xa7, 0xee, 0x11, 0xeb, 0x6a, 0xf0, 0xfc, 0xfa, 0xb6, 0x63, 0xdc, 0xdc, 0x76,
	0x8c, 0x9f, 0xb7, 0x1d, 0xe3, 0xf3, 0xa2, 0x53, 0xba, 0x59, 0x74, 0x4a, 0xdf, 0x17, 0x9d, 0xd2,
	0x9b, 0xee, 0x24, 0xe0, 0x93, 0x59, 0x8e, 0x61, 0xb1, 0xd8, 0xb7, 0x3d, 0xe2, 0x06, 0x91, 0x13,
	0x72, 0xe2, 0x44, 0xb6, 0xcf, 0xba, 0x94, 0x79, 0xc4, 0xfe, 0x90, 0xff, 0xe1, 0xa8, 0xeb, 0x9a,
	0xd4, 0xe4, 0x7a, 0x3d, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x1f, 0xf9, 0x00, 0x88, 0x04,
	0x00, 0x00,
}

func (m *Owner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Owner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Owner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.IDCollections.Size()
		i -= size
		if _, err := m.IDCollections.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.Address.Size()
		i -= size
		if _, err := m.Address.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IDCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.IDs.Size()
		i -= size
		if _, err := m.IDs.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AllowMint {
		i--
		if m.AllowMint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Reserve.Size()
		i -= size
		if _, err := m.Reserve.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.TokenURI) > 0 {
		i -= len(m.TokenURI)
		copy(dAtA[i:], m.TokenURI)
		i = encodeVarintNft(dAtA, i, uint64(len(m.TokenURI)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Creator.Size()
		i -= size
		if _, err := m.Creator.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Owners.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintNft(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NFTpacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NFTpacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NFTpacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.String_) > 0 {
		i -= len(m.String_)
		copy(dAtA[i:], m.String_)
		i = encodeVarintNft(dAtA, i, uint64(len(m.String_)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Amount != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Owner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Address.Size()
	n += 1 + l + sovNft(uint64(l))
	l = m.IDCollections.Size()
	n += 1 + l + sovNft(uint64(l))
	return n
}

func (m *IDCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = m.IDs.Size()
	n += 1 + l + sovNft(uint64(l))
	return n
}

func (m *BaseNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = m.Owners.Size()
	n += 1 + l + sovNft(uint64(l))
	l = m.Creator.Size()
	n += 1 + l + sovNft(uint64(l))
	l = len(m.TokenURI)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = m.Reserve.Size()
	n += 1 + l + sovNft(uint64(l))
	if m.AllowMint {
		n += 2
	}
	return n
}

func (m *NFTpacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovNft(uint64(m.Amount))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.String_)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	return n
}

func sovNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNft(x uint64) (n int) {
	return sovNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Owner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Owner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Owner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDCollections", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IDCollections.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IDs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Owners.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenURI", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenURI = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowMint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowMint = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NFTpacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NFTpacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NFTpacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNft = fmt.Errorf("proto: unexpected end of group")
)
