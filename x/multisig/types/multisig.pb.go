// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: multisig/multisig.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Transaction struct {
	ID        string                                          `protobuf:"bytes,1,opt,name=ID,proto3" json:"id" yaml:"id"`
	Wallet    github_com_cosmos_cosmos_sdk_types.AccAddress   `protobuf:"bytes,2,opt,name=Wallet,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"wallet" yaml:"wallet"`
	Receiver  github_com_cosmos_cosmos_sdk_types.AccAddress   `protobuf:"bytes,3,opt,name=Receiver,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"receiver" yaml:"receiver"`
	Coins     github_com_cosmos_cosmos_sdk_types.Coins        `protobuf:"bytes,4,rep,name=Coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins" yaml:"coins"`
	Signers   []github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,rep,name=Signers,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"signers" yaml:"signers"`
	CreatedAt int64                                           `protobuf:"varint,6,opt,name=CreatedAt,proto3" json:"created_at" yaml:"created_at"`
}

func (m *Transaction) Reset()      { *m = Transaction{} }
func (*Transaction) ProtoMessage() {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_f080f2c13e123bb8, []int{0}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

type Wallet struct {
	Address   github_com_cosmos_cosmos_sdk_types.AccAddress   `protobuf:"bytes,1,opt,name=Address,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address" yaml:"address"`
	Owners    []github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,rep,name=Owners,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owners" yaml:"owners"`
	Weights   []uint64                                        `protobuf:"varint,3,rep,packed,name=Weights,proto3" json:"weights" yaml:"weights"`
	Threshold uint64                                          `protobuf:"varint,4,opt,name=Threshold,proto3" json:"threshold" yaml:"threshold"`
}

func (m *Wallet) Reset()      { *m = Wallet{} }
func (*Wallet) ProtoMessage() {}
func (*Wallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f080f2c13e123bb8, []int{1}
}
func (m *Wallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wallet.Merge(m, src)
}
func (m *Wallet) XXX_Size() int {
	return m.Size()
}
func (m *Wallet) XXX_DiscardUnknown() {
	xxx_messageInfo_Wallet.DiscardUnknown(m)
}

var xxx_messageInfo_Wallet proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Transaction)(nil), "multisig.Transaction")
	proto.RegisterType((*Wallet)(nil), "multisig.Wallet")
}

func init() { proto.RegisterFile("multisig/multisig.proto", fileDescriptor_f080f2c13e123bb8) }

var fileDescriptor_f080f2c13e123bb8 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x3d, 0x8f, 0xd3, 0x4c,
	0x10, 0xc7, 0x6d, 0xe7, 0xdd, 0x4f, 0x1e, 0x5e, 0x0c, 0x12, 0x16, 0x12, 0x5e, 0xb3, 0xd7, 0xb8,
	0x49, 0x2c, 0x41, 0x81, 0x74, 0x0d, 0x8a, 0xef, 0x28, 0x4e, 0x42, 0x02, 0x2d, 0x91, 0x4e, 0x82,
	0x02, 0x39, 0xf6, 0xca, 0x59, 0x9d, 0x9d, 0x8d, 0xbc, 0x1b, 0xc2, 0x7d, 0x03, 0x4a, 0x4a, 0xca,
	0xd4, 0xf7, 0x49, 0xae, 0xbc, 0x12, 0x51, 0x2c, 0x28, 0x69, 0x4e, 0x29, 0xfd, 0x09, 0x90, 0xbd,
	0xeb, 0x44, 0x74, 0x28, 0x54, 0xde, 0xf9, 0xd9, 0xf3, 0xff, 0xcf, 0x8c, 0xc7, 0x36, 0x1f, 0x65,
	0x8b, 0x94, 0x13, 0x46, 0x12, 0xbf, 0x3e, 0x0c, 0xe7, 0x39, 0xe5, 0xd4, 0xea, 0xd6, 0xf1, 0xe3,
	0x87, 0x09, 0x4d, 0x68, 0x05, 0xfd, 0xf2, 0x24, 0xef, 0xc3, 0xab, 0xa6, 0xf9, 0xdf, 0x38, 0x0f,
	0x67, 0x2c, 0x8c, 0x38, 0xa1, 0x33, 0xeb, 0xc8, 0x34, 0xce, 0x4e, 0x6d, 0xdd, 0xd5, 0xbd, 0x5e,
	0xf0, 0x60, 0x2b, 0x80, 0x41, 0xe2, 0x42, 0x80, 0xde, 0x65, 0x98, 0xa5, 0xc7, 0x90, 0xc4, 0x10,
	0x19, 0x67, 0xa7, 0xd6, 0xd4, 0x6c, 0x9f, 0x87, 0x69, 0x8a, 0xb9, 0x6d, 0xb8, 0xba, 0xd7, 0x0f,
	0xde, 0x5e, 0x0b, 0xa0, 0xfd, 0x10, 0x60, 0x90, 0x10, 0x3e, 0x5d, 0x4c, 0x86, 0x11, 0xcd, 0xfc,
	0x88, 0xb2, 0x8c, 0x32, 0x75, 0x19, 0xb0, 0xf8, 0xc2, 0xe7, 0x97, 0x73, 0xcc, 0x86, 0xa3, 0x28,
	0x1a, 0xc5, 0x71, 0x8e, 0x19, 0xdb, 0x0a, 0xd0, 0x5e, 0x56, 0x32, 0x85, 0x00, 0xff, 0x4b, 0x07,
	0x19, 0x43, 0xa4, 0xf4, 0xad, 0xb9, 0xd9, 0x45, 0x38, 0xc2, 0xe4, 0x13, 0xce, 0xed, 0x46, 0xe5,
	0x35, 0x3e, 0xd4, 0xab, 0x9b, 0x2b, 0xa1, 0x42, 0x80, 0xbb, 0xd2, 0xad, 0x26, 0x10, 0xed, 0x5c,
	0xac, 0x0f, 0x66, 0xeb, 0x84, 0x92, 0x19, 0xb3, 0x9b, 0x6e, 0xc3, 0xeb, 0x07, 0xaf, 0xb6, 0x02,
	0xb4, 0xa2, 0x12, 0x14, 0x02, 0xf4, 0x65, 0x5a, 0x15, 0xc2, 0xab, 0x9f, 0xc0, 0xfb, 0x8b, 0x1a,
	0x2a, 0x31, 0x24, 0x35, 0xad, 0xd4, 0xec, 0xbc, 0x23, 0xc9, 0x0c, 0xe7, 0xcc, 0x6e, 0x55, 0xf2,
	0xe8, 0xd0, 0x6e, 0x3a, 0x4c, 0xea, 0x14, 0x02, 0xdc, 0x91, 0x55, 0x29, 0x00, 0x51, 0x6d, 0x61,
	0x8d, 0xcc, 0xde, 0x49, 0x8e, 0x43, 0x8e, 0xe3, 0x11, 0xb7, 0xdb, 0xae, 0xee, 0x35, 0x82, 0xa3,
	0xad, 0x00, 0x66, 0x24, 0xe1, 0xc7, 0xb0, 0x1c, 0xfc, 0x7d, 0xd5, 0xd3, 0x8e, 0x41, 0xb4, 0xcf,
	0x3a, 0xee, 0x7f, 0x59, 0x01, 0xed, 0xdb, 0x0a, 0x68, 0xb7, 0x2b, 0xa0, 0xc1, 0x5b, 0xa3, 0x7e,
	0xf1, 0x65, 0x27, 0xaa, 0x98, 0x6a, 0x59, 0xfe, 0xa5, 0x93, 0x50, 0x1e, 0xf7, 0x9d, 0x28, 0x00,
	0x51, 0x6d, 0x51, 0x2e, 0xdc, 0x9b, 0x65, 0x35, 0x36, 0xa3, 0x1a, 0xdb, 0xe1, 0x0b, 0x47, 0x97,
	0x6a, 0x6a, 0x6a, 0xe1, 0x64, 0x0c, 0x91, 0xd2, 0xb7, 0x5e, 0x98, 0x9d, 0x73, 0x4c, 0x92, 0x29,
	0x67, 0x76, 0xc3, 0x6d, 0x78, 0xcd, 0xe0, 0x49, 0x59, 0xe2, 0x52, 0xa2, 0x7d, 0x89, 0x0a, 0x40,
	0x54, 0x3f, 0x6d, 0xbd, 0x34, 0x7b, 0xe3, 0x69, 0x8e, 0xd9, 0x94, 0xa6, 0xb1, 0xdd, 0x74, 0x75,
	0xaf, 0x19, 0x3c, 0xdd, 0x0a, 0xd0, 0xe3, 0x35, 0x2c, 0x04, 0xb8, 0x27, 0x93, 0x77, 0x08, 0xa2,
	0x7d, 0xce, 0x9f, 0xa3, 0x0e, 0x5e, 0x5f, 0xaf, 0x1d, 0xfd, 0x66, 0xed, 0xe8, 0xbf, 0xd6, 0x8e,
	0xfe, 0x75, 0xe3, 0x68, 0x37, 0x1b, 0x47, 0xfb, 0xbe, 0x71, 0xb4, 0xf7, 0xcf, 0x26, 0x84, 0x4f,
	0x16, 0xd1, 0x05, 0xe6, 0x43, 0x9a, 0x27, 0x7e, 0x8c, 0x23, 0x92, 0x85, 0x29, 0xc7, 0x61, 0xe6,
	0x27, 0x74, 0x30, 0xa3, 0x31, 0xf6, 0x3f, 0xef, 0xfe, 0x02, 0x72, 0x06, 0x93, 0x76, 0xf5, 0xb1,
	0x3f, 0xff, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x78, 0xa8, 0xfc, 0xc2, 0x27, 0x04, 0x00, 0x00,
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintMultisig(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Signers[iNdEx].Size()
				i -= size
				if _, err := m.Signers[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintMultisig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Coins[iNdEx])
			copy(dAtA[i:], m.Coins[iNdEx])
			i = encodeVarintMultisig(dAtA, i, uint64(len(m.Coins[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.Receiver.Size()
		i -= size
		if _, err := m.Receiver.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMultisig(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Wallet.Size()
		i -= size
		if _, err := m.Wallet.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMultisig(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintMultisig(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Wallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Threshold != 0 {
		i = encodeVarintMultisig(dAtA, i, uint64(m.Threshold))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Weights) > 0 {
		dAtA2 := make([]byte, len(m.Weights)*10)
		var j1 int
		for _, num := range m.Weights {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMultisig(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owners) > 0 {
		for iNdEx := len(m.Owners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Owners[iNdEx].Size()
				i -= size
				if _, err := m.Owners[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintMultisig(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.Address.Size()
		i -= size
		if _, err := m.Address.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMultisig(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMultisig(dAtA []byte, offset int, v uint64) int {
	offset -= sovMultisig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovMultisig(uint64(l))
	}
	l = m.Wallet.Size()
	n += 1 + l + sovMultisig(uint64(l))
	l = m.Receiver.Size()
	n += 1 + l + sovMultisig(uint64(l))
	if len(m.Coins) > 0 {
		for _, b := range m.Coins {
			l = len(b)
			n += 1 + l + sovMultisig(uint64(l))
		}
	}
	if len(m.Signers) > 0 {
		for _, e := range m.Signers {
			l = e.Size()
			n += 1 + l + sovMultisig(uint64(l))
		}
	}
	if m.CreatedAt != 0 {
		n += 1 + sovMultisig(uint64(m.CreatedAt))
	}
	return n
}

func (m *Wallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Address.Size()
	n += 1 + l + sovMultisig(uint64(l))
	if len(m.Owners) > 0 {
		for _, e := range m.Owners {
			l = e.Size()
			n += 1 + l + sovMultisig(uint64(l))
		}
	}
	if len(m.Weights) > 0 {
		l = 0
		for _, e := range m.Weights {
			l += sovMultisig(uint64(e))
		}
		n += 1 + sovMultisig(uint64(l)) + l
	}
	if m.Threshold != 0 {
		n += 1 + sovMultisig(uint64(m.Threshold))
	}
	return n
}

func sovMultisig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMultisig(x uint64) (n int) {
	return sovMultisig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMultisig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Wallet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Receiver.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, make([]byte, postIndex-iNdEx))
			copy(m.Coins[len(m.Coins)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.AccAddress
			m.Signers = append(m.Signers, v)
			if err := m.Signers[len(m.Signers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultisig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultisig
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultisig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.AccAddress
			m.Owners = append(m.Owners, v)
			if err := m.Owners[len(m.Owners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMultisig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Weights = append(m.Weights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMultisig
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMultisig
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMultisig
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Weights) == 0 {
					m.Weights = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMultisig
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Weights = append(m.Weights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			m.Threshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Threshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMultisig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMultisig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMultisig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMultisig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultisig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMultisig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMultisig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMultisig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMultisig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMultisig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMultisig = fmt.Errorf("proto: unexpected end of group")
)
