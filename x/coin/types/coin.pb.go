// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: coin/coin.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Coin struct {
	Title       string                                 `protobuf:"bytes,1,opt,name=Title,proto3" json:"title" yaml:"title"`
	CRR         uint64                                 `protobuf:"varint,2,opt,name=CRR,proto3" json:"constant_reserve_ratio" yaml:"constant_reserve_ratio"`
	Symbol      string                                 `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"symbol" yaml:"symbol"`
	Reserve     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=Reserve,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"reserve" yaml:"reserve"`
	LimitVolume github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=LimitVolume,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"limit_volume" yaml:"limit_volume"`
	Volume      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=Volume,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"volume" yaml:"volume"`
	Creator     string                                 `protobuf:"bytes,7,opt,name=Creator,proto3" json:"creator" yaml:"creator"`
	Identity    string                                 `protobuf:"bytes,8,opt,name=Identity,proto3" json:"identity" yaml:"identity"`
}

func (m *Coin) Reset()      { *m = Coin{} }
func (*Coin) ProtoMessage() {}
func (*Coin) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2db541d495277f3, []int{0}
}
func (m *Coin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Coin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coin.Merge(m, src)
}
func (m *Coin) XXX_Size() int {
	return m.Size()
}
func (m *Coin) XXX_DiscardUnknown() {
	xxx_messageInfo_Coin.DiscardUnknown(m)
}

var xxx_messageInfo_Coin proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Coin)(nil), "coin.Coin")
}

func init() { proto.RegisterFile("coin/coin.proto", fileDescriptor_e2db541d495277f3) }

var fileDescriptor_e2db541d495277f3 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x3f, 0x8f, 0xd3, 0x30,
	0x18, 0xc6, 0x13, 0xae, 0x4d, 0x8b, 0x29, 0x9c, 0x64, 0x10, 0x0a, 0xa0, 0x8b, 0x4f, 0x1e, 0xd0,
	0x2d, 0x97, 0x0c, 0x37, 0x20, 0xdd, 0x6d, 0xed, 0x42, 0x05, 0x2c, 0xe6, 0xcf, 0xc0, 0x52, 0x25,
	0xa9, 0x15, 0xac, 0x4b, 0xf2, 0x9e, 0x12, 0xf7, 0xa0, 0x2b, 0x13, 0x23, 0x23, 0x63, 0x3f, 0xce,
	0x8d, 0x37, 0x22, 0x06, 0x0b, 0xb5, 0x0b, 0xca, 0x98, 0x4f, 0x80, 0x62, 0xbb, 0xc7, 0x0d, 0x2c,
	0x5d, 0x12, 0xfb, 0xf1, 0xfb, 0x3c, 0x3f, 0xfb, 0xd5, 0x8b, 0xf6, 0x53, 0x10, 0x65, 0xd4, 0x7d,
	0xc2, 0x8b, 0x0a, 0x24, 0xe0, 0x5e, 0xb7, 0x7e, 0xfa, 0x28, 0x83, 0x0c, 0xb4, 0x10, 0x75, 0x2b,
	0x73, 0x46, 0xbf, 0xf6, 0x51, 0x6f, 0x02, 0xa2, 0xc4, 0x11, 0xea, 0xbf, 0x13, 0x32, 0xe7, 0xbe,
	0x7b, 0xe8, 0x1e, 0xdd, 0x1d, 0x3f, 0x69, 0x14, 0xe9, 0xcb, 0x4e, 0x68, 0x15, 0x19, 0x2d, 0xe3,
	0x22, 0x3f, 0xa5, 0x7a, 0x4b, 0x99, 0xa9, 0xc3, 0x6f, 0xd0, 0xde, 0x84, 0x31, 0xff, 0xce, 0xa1,
	0x7b, 0xd4, 0x1b, 0x9f, 0x35, 0x8a, 0x3c, 0x4e, 0xa1, 0xac, 0x65, 0x5c, 0xca, 0x59, 0xc5, 0x6b,
	0x5e, 0x5d, 0xf2, 0x59, 0x15, 0x4b, 0x01, 0xad, 0x22, 0x07, 0xc6, 0xff, 0xff, 0x73, 0xca, 0xba,
	0x1c, 0x7c, 0x82, 0xbc, 0xb7, 0xcb, 0x22, 0x81, 0xdc, 0xdf, 0xd3, 0x17, 0x78, 0xd6, 0x28, 0xe2,
	0xd5, 0x5a, 0x69, 0x15, 0xb9, 0x6f, 0x12, 0xcc, 0x9e, 0x32, 0x5b, 0x8a, 0x39, 0x1a, 0x30, 0x93,
	0xe5, 0xf7, 0xb4, 0xeb, 0xd5, 0x95, 0x22, 0xce, 0x2f, 0x45, 0x9e, 0x67, 0x42, 0x7e, 0x5a, 0x24,
	0x61, 0x0a, 0x45, 0x94, 0x42, 0x5d, 0x40, 0x6d, 0x7f, 0xc7, 0xf5, 0xfc, 0x3c, 0x92, 0xcb, 0x0b,
	0x5e, 0x87, 0xd3, 0x52, 0x36, 0x8a, 0x0c, 0xec, 0x65, 0x5a, 0x45, 0x1e, 0x18, 0x88, 0x15, 0x28,
	0xdb, 0x66, 0xe3, 0xcf, 0xe8, 0xde, 0x6b, 0x51, 0x08, 0xf9, 0x01, 0xf2, 0x45, 0xc1, 0xfd, 0xbe,
	0x46, 0xbd, 0xdf, 0x19, 0x35, 0xca, 0xbb, 0x90, 0xd9, 0xa5, 0x4e, 0x69, 0x15, 0x79, 0x68, 0x78,
	0xb7, 0x55, 0xca, 0x6e, 0x93, 0x70, 0x8c, 0x3c, 0xcb, 0xf4, 0x34, 0x73, 0xba, 0x33, 0xd3, 0xbb,
	0xa1, 0xd9, 0x16, 0x6e, 0x39, 0x36, 0x18, 0xbf, 0x40, 0x83, 0x49, 0xc5, 0x63, 0x09, 0x95, 0x3f,
	0xd0, 0x8c, 0x83, 0xae, 0x29, 0xa9, 0x91, 0xfe, 0x35, 0xc5, 0x0a, 0x94, 0x6d, 0xab, 0xf1, 0x19,
	0x1a, 0x4e, 0xe7, 0xbc, 0x94, 0x42, 0x2e, 0xfd, 0xa1, 0x76, 0x92, 0x46, 0x91, 0xa1, 0xb0, 0x5a,
	0xab, 0xc8, 0xbe, 0xb1, 0x6e, 0x15, 0xca, 0x6e, 0x0c, 0xa7, 0xa3, 0x6f, 0x2b, 0xe2, 0xfc, 0x58,
	0x11, 0xe7, 0xcf, 0x8a, 0xb8, 0xe3, 0x97, 0x57, 0xeb, 0xc0, 0xbd, 0x5e, 0x07, 0xee, 0xef, 0x75,
	0xe0, 0x7e, 0xdf, 0x04, 0xce, 0xf5, 0x26, 0x70, 0x7e, 0x6e, 0x02, 0xe7, 0x63, 0x98, 0x08, 0x99,
	0x2c, 0xd2, 0x73, 0x2e, 0x43, 0xa8, 0xb2, 0x68, 0xce, 0x53, 0x51, 0xc4, 0xb9, 0xe4, 0x71, 0x11,
	0x65, 0x70, 0x5c, 0xc2, 0x9c, 0x47, 0x5f, 0xf4, 0xa8, 0x9b, 0x47, 0x27, 0x9e, 0x9e, 0xea, 0x93,
	0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x64, 0xeb, 0x03, 0x60, 0x04, 0x03, 0x00, 0x00,
}

func (this *Coin) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Coin)
	if !ok {
		that2, ok := that.(Coin)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.CRR != that1.CRR {
		return false
	}
	if this.Symbol != that1.Symbol {
		return false
	}
	if !this.Reserve.Equal(that1.Reserve) {
		return false
	}
	if !this.LimitVolume.Equal(that1.LimitVolume) {
		return false
	}
	if !this.Volume.Equal(that1.Volume) {
		return false
	}
	if this.Creator != that1.Creator {
		return false
	}
	if this.Identity != that1.Identity {
		return false
	}
	return true
}
func (m *Coin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Coin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintCoin(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCoin(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.Volume.Size()
		i -= size
		if _, err := m.Volume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCoin(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.LimitVolume.Size()
		i -= size
		if _, err := m.LimitVolume.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCoin(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Reserve.Size()
		i -= size
		if _, err := m.Reserve.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCoin(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintCoin(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CRR != 0 {
		i = encodeVarintCoin(dAtA, i, uint64(m.CRR))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCoin(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCoin(dAtA []byte, offset int, v uint64) int {
	offset -= sovCoin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Coin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	if m.CRR != 0 {
		n += 1 + sovCoin(uint64(m.CRR))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	l = m.Reserve.Size()
	n += 1 + l + sovCoin(uint64(l))
	l = m.LimitVolume.Size()
	n += 1 + l + sovCoin(uint64(l))
	l = m.Volume.Size()
	n += 1 + l + sovCoin(uint64(l))
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovCoin(uint64(l))
	}
	return n
}

func sovCoin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCoin(x uint64) (n int) {
	return sovCoin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Coin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Coin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Coin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CRR", wireType)
			}
			m.CRR = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CRR |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitVolume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LimitVolume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Volume.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCoin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCoin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCoin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCoin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCoin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCoin = fmt.Errorf("proto: unexpected end of group")
)
