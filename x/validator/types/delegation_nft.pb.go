// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validator/delegation_nft.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DelegationNFT struct {
	DelegatorAddress string                                  `protobuf:"bytes,1,opt,name=DelegatorAddress,proto3" json:"delegator_address" yaml:"delegator_address"`
	ValidatorAddress string                                  `protobuf:"bytes,2,opt,name=ValidatorAddress,proto3" json:"validator_address" yaml:"validator_address"`
	Denom            string                                  `protobuf:"bytes,3,opt,name=Denom,proto3" json:"denom" yaml:"denom"`
	TokenID          string                                  `protobuf:"bytes,4,opt,name=TokenID,proto3" json:"token_id" yaml:"token_id"`
	Quantity         github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,5,opt,name=Quantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"quantity" yaml:"quantity"`
	Coin             github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=Coin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin" yaml:"coin"`
}

func (m *DelegationNFT) Reset()         { *m = DelegationNFT{} }
func (m *DelegationNFT) String() string { return proto.CompactTextString(m) }
func (*DelegationNFT) ProtoMessage()    {}
func (*DelegationNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cc0a72f3637630f, []int{0}
}
func (m *DelegationNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationNFT.Merge(m, src)
}
func (m *DelegationNFT) XXX_Size() int {
	return m.Size()
}
func (m *DelegationNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationNFT.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationNFT proto.InternalMessageInfo

type UnbondingDelegationNFTEntry struct {
	CreationHeight int64                                   `protobuf:"varint,1,opt,name=CreationHeight,proto3" json:"creation_height" yaml:"creation_height"`
	CompletionTime time.Time                               `protobuf:"bytes,2,opt,name=CompletionTime,proto3,customtype=time.Time" json:"completion_time" yaml:"completion_time"`
	Denom          string                                  `protobuf:"bytes,3,opt,name=Denom,proto3" json:"denom" yaml:"denom"`
	TokenID        string                                  `protobuf:"bytes,4,opt,name=TokenID,proto3" json:"token_id" yaml:"token_id"`
	Quantity       github_com_cosmos_cosmos_sdk_types.Int  `protobuf:"bytes,5,opt,name=Quantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"quantity" yaml:"quantity"`
	Balance        github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,6,opt,name=Balance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"balance" yaml:"balance"`
}

func (m *UnbondingDelegationNFTEntry) Reset()         { *m = UnbondingDelegationNFTEntry{} }
func (m *UnbondingDelegationNFTEntry) String() string { return proto.CompactTextString(m) }
func (*UnbondingDelegationNFTEntry) ProtoMessage()    {}
func (*UnbondingDelegationNFTEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cc0a72f3637630f, []int{1}
}
func (m *UnbondingDelegationNFTEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingDelegationNFTEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingDelegationNFTEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingDelegationNFTEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingDelegationNFTEntry.Merge(m, src)
}
func (m *UnbondingDelegationNFTEntry) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingDelegationNFTEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingDelegationNFTEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingDelegationNFTEntry proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DelegationNFT)(nil), "validator.DelegationNFT")
	proto.RegisterType((*UnbondingDelegationNFTEntry)(nil), "validator.UnbondingDelegationNFTEntry")
}

func init() { proto.RegisterFile("validator/delegation_nft.proto", fileDescriptor_5cc0a72f3637630f) }

var fileDescriptor_5cc0a72f3637630f = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x94, 0x41, 0x8f, 0xd2, 0x4e,
	0x18, 0xc6, 0xcb, 0x7f, 0x61, 0x81, 0xf9, 0x2b, 0xab, 0x8d, 0x31, 0x55, 0x93, 0x8e, 0x99, 0x83,
	0x7a, 0x81, 0xc6, 0xec, 0xc9, 0x3d, 0x98, 0x08, 0xb8, 0x71, 0x13, 0xd7, 0xc4, 0x86, 0xf5, 0xb0,
	0x89, 0x21, 0x6d, 0x67, 0x28, 0x13, 0xda, 0x19, 0x6c, 0x07, 0x23, 0xdf, 0xc0, 0x78, 0xf2, 0x23,
	0xec, 0xc5, 0xef, 0xb2, 0xc7, 0x3d, 0x1a, 0x0f, 0x13, 0x03, 0x17, 0xc3, 0xb1, 0x9f, 0xc0, 0xcc,
	0xb4, 0x05, 0x91, 0x8b, 0x5e, 0x3d, 0x01, 0xcf, 0xf3, 0xbe, 0xbf, 0xe7, 0x25, 0x79, 0x32, 0xc0,
	0x7e, 0xef, 0x45, 0x14, 0x7b, 0x82, 0x27, 0x0e, 0x26, 0x11, 0x09, 0x3d, 0x41, 0x39, 0x1b, 0xb2,
	0x91, 0xe8, 0x4c, 0x13, 0x2e, 0xb8, 0xd9, 0x5c, 0xfb, 0x77, 0x6f, 0x85, 0x3c, 0xe4, 0x5a, 0x75,
	0xd4, 0xb7, 0x7c, 0x00, 0x7d, 0xaa, 0x82, 0xeb, 0xfd, 0xf5, 0xe6, 0xab, 0xe3, 0x81, 0xf9, 0x16,
	0xdc, 0x28, 0x04, 0x9e, 0x3c, 0xc3, 0x38, 0x21, 0x69, 0x6a, 0x55, 0xee, 0x57, 0x1e, 0x35, 0xbb,
	0x8f, 0x57, 0x12, 0xde, 0xc4, 0xa5, 0x37, 0xf4, 0x72, 0x33, 0x93, 0xd0, 0x9a, 0x7b, 0x71, 0x74,
	0x84, 0x76, 0x2c, 0xe4, 0xee, 0xa0, 0x14, 0xfe, 0x4d, 0x79, 0x53, 0x89, 0xff, 0x6f, 0x83, 0x5f,
	0xdf, 0xbb, 0x8b, 0xdf, 0xb1, 0x90, 0xbb, 0x83, 0x32, 0x1d, 0x50, 0xeb, 0x13, 0xc6, 0x63, 0x6b,
	0x4f, 0x33, 0xef, 0xac, 0x24, 0xac, 0x61, 0x25, 0x64, 0x12, 0x5e, 0x2b, 0xcf, 0x64, 0x3c, 0x46,
	0x6e, 0x3e, 0x67, 0x3e, 0x01, 0xf5, 0x01, 0x9f, 0x10, 0x76, 0xd2, 0xb7, 0xaa, 0x7a, 0x05, 0xae,
	0x24, 0x6c, 0x08, 0x25, 0x0d, 0x29, 0xce, 0x24, 0x3c, 0xc8, 0xb7, 0x4a, 0x05, 0xb9, 0xe5, 0xbc,
	0x49, 0x41, 0xe3, 0xf5, 0xcc, 0x63, 0x82, 0x8a, 0xb9, 0x55, 0xd3, 0xbb, 0xa7, 0x97, 0x12, 0x1a,
	0xdf, 0x24, 0x7c, 0x10, 0x52, 0x31, 0x9e, 0xf9, 0x9d, 0x80, 0xc7, 0x4e, 0xc0, 0xd3, 0x98, 0xa7,
	0xc5, 0x47, 0x3b, 0xc5, 0x13, 0x47, 0xcc, 0xa7, 0x24, 0xed, 0x9c, 0x30, 0xa1, 0x92, 0xde, 0x15,
	0x84, 0x4d, 0x52, 0xa9, 0x20, 0x77, 0x8d, 0x37, 0xcf, 0x41, 0xb5, 0xc7, 0x29, 0xb3, 0xf6, 0x75,
	0xcc, 0x71, 0x11, 0xf3, 0xf0, 0x0f, 0x62, 0xd4, 0xda, 0x4a, 0xc2, 0x6a, 0xc0, 0x29, 0xcb, 0x24,
	0xfc, 0x3f, 0xcf, 0x50, 0xbf, 0x90, 0xab, 0x99, 0x47, 0x8d, 0x8f, 0x17, 0xd0, 0xf8, 0x71, 0x01,
	0x0d, 0xf4, 0xa5, 0x0a, 0xee, 0x9d, 0x31, 0x9f, 0x33, 0x4c, 0x59, 0xb8, 0xd5, 0x8a, 0xe7, 0x4c,
	0x24, 0x73, 0xf3, 0x0c, 0xb4, 0x7a, 0x09, 0xd1, 0xda, 0x0b, 0x42, 0xc3, 0xb1, 0xd0, 0xc5, 0xd8,
	0xeb, 0xb6, 0x57, 0x12, 0x1e, 0x04, 0x85, 0x33, 0x1c, 0x6b, 0x2b, 0x93, 0xf0, 0x76, 0x91, 0xb5,
	0x6d, 0x20, 0xf7, 0x37, 0x88, 0x39, 0x02, 0xad, 0x1e, 0x8f, 0xa7, 0x11, 0x51, 0xda, 0x80, 0xc6,
	0xa4, 0x28, 0xc4, 0xd3, 0xe2, 0x6f, 0x36, 0x05, 0x8d, 0x49, 0x47, 0x19, 0x3a, 0x67, 0x3d, 0x3a,
	0x54, 0xfa, 0x2f, 0x39, 0xdb, 0x86, 0xca, 0xd9, 0xa2, 0xfe, 0xab, 0xdd, 0x18, 0x81, 0x7a, 0xd7,
	0x8b, 0x3c, 0x16, 0x90, 0xa2, 0x1e, 0x2f, 0xff, 0xbe, 0x1e, 0x75, 0x3f, 0x27, 0x64, 0x12, 0xb6,
	0xf2, 0xa4, 0x42, 0x40, 0x6e, 0x09, 0xdf, 0xf4, 0xa4, 0x7b, 0x7a, 0xb9, 0xb0, 0x2b, 0x57, 0x0b,
	0xbb, 0xf2, 0x7d, 0x61, 0x57, 0x3e, 0x2f, 0x6d, 0xe3, 0x6a, 0x69, 0x1b, 0x5f, 0x97, 0xb6, 0x71,
	0x7e, 0xe8, 0x53, 0xe1, 0xcf, 0x82, 0x09, 0x11, 0x1d, 0x9e, 0x84, 0x0e, 0x26, 0x01, 0x8d, 0xbd,
	0x48, 0x10, 0x2f, 0x76, 0x42, 0xde, 0x66, 0x1c, 0x13, 0xe7, 0x83, 0xb3, 0x79, 0xb3, 0xf4, 0x0d,
	0xfe, 0xbe, 0x7e, 0x8a, 0x0e, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x40, 0xe7, 0xc7, 0x4f, 0xcd,
	0x04, 0x00, 0x00,
}

func (m *DelegationNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Coin.Size()
		i -= size
		if _, err := m.Coin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegationNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegationNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintDelegationNft(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDelegationNft(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintDelegationNft(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintDelegationNft(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingDelegationNFTEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingDelegationNFTEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingDelegationNFTEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Balance.Size()
		i -= size
		if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegationNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegationNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintDelegationNft(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintDelegationNft(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.CompletionTime.Size()
		i -= size
		if _, err := m.CompletionTime.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDelegationNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.CreationHeight != 0 {
		i = encodeVarintDelegationNft(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDelegationNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovDelegationNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegationNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegationNft(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovDelegationNft(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDelegationNft(uint64(l))
	}
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovDelegationNft(uint64(l))
	}
	l = m.Quantity.Size()
	n += 1 + l + sovDelegationNft(uint64(l))
	l = m.Coin.Size()
	n += 1 + l + sovDelegationNft(uint64(l))
	return n
}

func (m *UnbondingDelegationNFTEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationHeight != 0 {
		n += 1 + sovDelegationNft(uint64(m.CreationHeight))
	}
	l = m.CompletionTime.Size()
	n += 1 + l + sovDelegationNft(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovDelegationNft(uint64(l))
	}
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovDelegationNft(uint64(l))
	}
	l = m.Quantity.Size()
	n += 1 + l + sovDelegationNft(uint64(l))
	l = m.Balance.Size()
	n += 1 + l + sovDelegationNft(uint64(l))
	return n
}

func sovDelegationNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDelegationNft(x uint64) (n int) {
	return sovDelegationNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegationNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegationNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegationNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingDelegationNFTEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDelegationNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingDelegationNFTEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingDelegationNFTEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CompletionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDelegationNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDelegationNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDelegationNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDelegationNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDelegationNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDelegationNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDelegationNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDelegationNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDelegationNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDelegationNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDelegationNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDelegationNft = fmt.Errorf("proto: unexpected end of group")
)
