// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validator/validator.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_crypto_types "github.com/cosmos/cosmos-sdk/crypto/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Validator struct {
	ValAddress              github_com_cosmos_cosmos_sdk_types.ValAddress    `protobuf:"bytes,1,opt,name=ValAddress,proto3,customtype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"val_address" yaml:"val_address"`
	PubKey                  github_com_cosmos_cosmos_sdk_crypto_types.PubKey `protobuf:"bytes,2,opt,name=PubKey,proto3,customtype=github.com/cosmos/cosmos-sdk/crypto/types.PubKey" json:"pub_key" yaml:"pub_key"`
	Tokens                  github_com_cosmos_cosmos_sdk_types.Int           `protobuf:"bytes,3,opt,name=Tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"val_address" yaml:"val_address"`
	Status                  BondStatus                                       `protobuf:"bytes,4,opt,name=Status,proto3,customtype=BondStatus" json:"status" yaml:"status"`
	Commission              github_com_cosmos_cosmos_sdk_types.Dec           `protobuf:"bytes,5,opt,name=Commission,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"comission" yaml:"comission"`
	Jailed                  bool                                             `protobuf:"varint,6,opt,name=Jailed,proto3" json:"jailed" yaml:"jailed"`
	UnbondingCompletionTime time.Time                                        `protobuf:"bytes,7,opt,name=UnbondingCompletionTime,proto3,customtype=time.Time" json:"unbonding_completion_time" yaml:"unbonding_completion_time"`
	UnbondingHeight         int64                                            `protobuf:"varint,8,opt,name=UnbondingHeight,proto3" json:"unbonding_height" yaml:"unbonding_height"`
	Description             Description                                      `protobuf:"bytes,9,opt,name=Description,proto3" json:"description" yaml:"description"`
	AccumRewards            github_com_cosmos_cosmos_sdk_types.Int           `protobuf:"bytes,10,opt,name=AccumRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"accum_rewards" yaml:"accum_rewards"`
	RewardAddress           github_com_cosmos_cosmos_sdk_types.AccAddress    `protobuf:"bytes,11,opt,name=RewardAddress,proto3,customtype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"reward_address" yaml:"reward_address"`
	Online                  bool                                             `protobuf:"varint,12,opt,name=Online,proto3" json:"online" yaml:"online"`
}

func (m *Validator) Reset()      { *m = Validator{} }
func (*Validator) ProtoMessage() {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972accd7c1f0747, []int{0}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

type Description struct {
	Moniker         string `protobuf:"bytes,1,opt,name=Moniker,proto3" json:"moniker" yaml:"moniker"`
	Identity        string `protobuf:"bytes,2,opt,name=Identity,proto3" json:"identity" yaml:"identity"`
	Website         string `protobuf:"bytes,3,opt,name=Website,proto3" json:"website" yaml:"website"`
	SecurityContact string `protobuf:"bytes,4,opt,name=SecurityContact,proto3" json:"security_contact" yaml:"security_contact"`
	Details         string `protobuf:"bytes,5,opt,name=Details,proto3" json:"details" yaml:"details"`
}

func (m *Description) Reset()      { *m = Description{} }
func (*Description) ProtoMessage() {}
func (*Description) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972accd7c1f0747, []int{1}
}
func (m *Description) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Description) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Description.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Description) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Description.Merge(m, src)
}
func (m *Description) XXX_Size() int {
	return m.Size()
}
func (m *Description) XXX_DiscardUnknown() {
	xxx_messageInfo_Description.DiscardUnknown(m)
}

var xxx_messageInfo_Description proto.InternalMessageInfo

type Params struct {
	UnbondingTime     time.Duration `protobuf:"bytes,1,opt,name=UnbondingTime,proto3,customtype=time.Duration" json:"unbonding_time" yaml:"unbonding_time"`
	MaxValidators     uint16        `protobuf:"bytes,2,opt,name=MaxValidators,proto3,customtype=uint16" json:"max_validators" yaml:"max_validators"`
	MaxEntries        uint16        `protobuf:"bytes,3,opt,name=MaxEntries,proto3,customtype=uint16" json:"max_entries" yaml:"max_entries"`
	BondDenom         string        `protobuf:"bytes,4,opt,name=BondDenom,proto3" json:"bond_denom" yaml:"bond_denom"`
	HistoricalEntries uint16        `protobuf:"bytes,5,opt,name=HistoricalEntries,proto3,customtype=uint16" json:"historical_entries" yaml:"historical_entries"`
	MaxDelegations    uint16        `protobuf:"bytes,6,opt,name=MaxDelegations,proto3,customtype=uint16" json:"max_delegations" yaml:"max_delegations"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e972accd7c1f0747, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Validator)(nil), "validator.Validator")
	proto.RegisterType((*Description)(nil), "validator.Description")
	proto.RegisterType((*Params)(nil), "validator.Params")
}

func init() { proto.RegisterFile("validator/validator.proto", fileDescriptor_e972accd7c1f0747) }

var fileDescriptor_e972accd7c1f0747 = []byte{
	// 1040 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xb7, 0xdb, 0xe2, 0xc6, 0x93, 0x38, 0x69, 0x47, 0xfd, 0xd8, 0x04, 0xe1, 0x89, 0x06, 0x09,
	0x85, 0x43, 0x6c, 0x20, 0x12, 0x88, 0xf4, 0x42, 0x1c, 0x57, 0x6a, 0x40, 0x51, 0xab, 0x49, 0x3f,
	0x44, 0x2f, 0x66, 0xbc, 0x3b, 0x38, 0x83, 0x77, 0x77, 0xac, 0xdd, 0x71, 0x1b, 0xc3, 0x1d, 0x71,
	0xe0, 0xc0, 0x91, 0x63, 0xfe, 0x08, 0xfe, 0x88, 0x5e, 0x90, 0x2a, 0x4e, 0x88, 0xc3, 0x08, 0x25,
	0x17, 0xe4, 0xe3, 0x1e, 0x38, 0xa3, 0xf9, 0xf0, 0xee, 0xda, 0x51, 0x51, 0x73, 0xf2, 0xcc, 0xef,
	0xbd, 0xf7, 0xfb, 0xbd, 0xd9, 0x79, 0xef, 0x8d, 0xc1, 0xfa, 0x0b, 0x1a, 0xf2, 0x80, 0x4a, 0x91,
	0xb4, 0xf3, 0x55, 0x6b, 0x94, 0x08, 0x29, 0x60, 0x3d, 0x07, 0x36, 0x6e, 0x0d, 0xc4, 0x40, 0x18,
	0xb4, 0xad, 0x57, 0xd6, 0x61, 0x63, 0xdd, 0x17, 0x69, 0x24, 0xd2, 0x9e, 0x35, 0xd8, 0x8d, 0x35,
	0xe1, 0x7f, 0xeb, 0xa0, 0xfe, 0x74, 0x16, 0x0e, 0xbf, 0x07, 0xe0, 0x29, 0x0d, 0xf7, 0x82, 0x20,
	0x61, 0x69, 0xea, 0x55, 0x37, 0xab, 0x5b, 0x2b, 0x9d, 0xe7, 0xaf, 0x14, 0xaa, 0xfc, 0xa5, 0xd0,
	0xf6, 0x80, 0xcb, 0xe3, 0x71, 0xbf, 0xe5, 0x8b, 0xc8, 0x51, 0xb8, 0x9f, 0xed, 0x34, 0x18, 0xb6,
	0xe5, 0x64, 0xc4, 0xd2, 0x56, 0x11, 0x3c, 0x55, 0x68, 0xf9, 0x05, 0x0d, 0x7b, 0xd4, 0x6e, 0x33,
	0x85, 0xe0, 0x84, 0x46, 0xe1, 0x2e, 0x2e, 0x81, 0x98, 0x94, 0xd4, 0x60, 0x04, 0x6a, 0x8f, 0xc6,
	0xfd, 0xaf, 0xd8, 0xc4, 0xbb, 0x62, 0x74, 0x9f, 0x38, 0xdd, 0x8f, 0xfe, 0x57, 0xd7, 0x4f, 0x26,
	0x23, 0x29, 0x9c, 0xbc, 0x8d, 0x9f, 0x2a, 0x74, 0x7d, 0x34, 0xee, 0xf7, 0x86, 0x6c, 0x92, 0x29,
	0xb4, 0x6a, 0x65, 0x1d, 0x80, 0x89, 0x13, 0x81, 0x43, 0x50, 0x7b, 0x2c, 0x86, 0x2c, 0x4e, 0xbd,
	0xab, 0x46, 0xee, 0xc8, 0xc9, 0x7d, 0xf0, 0x16, 0xc7, 0x3c, 0x88, 0xe5, 0xdb, 0x9d, 0xcf, 0x49,
	0xc0, 0xfb, 0xa0, 0x76, 0x24, 0xa9, 0x1c, 0xa7, 0xde, 0x35, 0x23, 0xb6, 0xed, 0xc4, 0x40, 0x47,
	0xc4, 0x81, 0xb5, 0x4c, 0x15, 0xaa, 0xa5, 0x66, 0x95, 0x29, 0xd4, 0xb0, 0x5c, 0x76, 0x8f, 0x89,
	0x0b, 0x86, 0x02, 0x80, 0x7d, 0x11, 0x45, 0x3c, 0x4d, 0xb9, 0x88, 0xbd, 0x77, 0x0c, 0xd5, 0xc3,
	0x4b, 0xe4, 0xdd, 0x65, 0xfe, 0x54, 0xa1, 0xba, 0x2f, 0x1c, 0x45, 0xa6, 0xd0, 0x0d, 0xab, 0x94,
	0x43, 0x98, 0x94, 0x24, 0xe0, 0x0e, 0xa8, 0x7d, 0x49, 0x79, 0xc8, 0x02, 0xaf, 0xb6, 0x59, 0xdd,
	0x5a, 0xea, 0xbc, 0xab, 0xb3, 0xfc, 0xce, 0x20, 0x45, 0x96, 0x76, 0x8f, 0x89, 0x73, 0x85, 0x3f,
	0x57, 0xc1, 0xdd, 0x27, 0x71, 0x5f, 0xc4, 0x01, 0x8f, 0x07, 0xfb, 0x22, 0x1a, 0x85, 0x4c, 0x72,
	0x11, 0x3f, 0xe6, 0x11, 0xf3, 0xae, 0x9b, 0x9c, 0x89, 0xcb, 0xb9, 0x2e, 0x79, 0xc4, 0x5a, 0xda,
	0x30, 0x55, 0x68, 0x7d, 0x3c, 0x8b, 0xe9, 0xf9, 0x79, 0x50, 0x4f, 0x7b, 0x64, 0x0a, 0x6d, 0x5a,
	0xa9, 0x37, 0xba, 0x60, 0xf2, 0x26, 0x49, 0xf8, 0x35, 0x58, 0xcb, 0x4d, 0x0f, 0x18, 0x1f, 0x1c,
	0x4b, 0x6f, 0x69, 0xb3, 0xba, 0x75, 0xb5, 0xd3, 0x9e, 0x2a, 0x74, 0xa3, 0x60, 0x3c, 0x36, 0xb6,
	0x4c, 0xa1, 0xbb, 0x8b, 0x5a, 0xd6, 0x82, 0xc9, 0x22, 0x0f, 0xf4, 0xc1, 0x72, 0x97, 0xa5, 0x7e,
	0xc2, 0x47, 0x5a, 0xcd, 0xab, 0x6f, 0x56, 0xb7, 0x96, 0x3f, 0xb9, 0xd3, 0x2a, 0xfa, 0xb3, 0x64,
	0xed, 0x7c, 0xa8, 0x0f, 0xad, 0xcb, 0x26, 0x28, 0xc0, 0xa2, 0x6c, 0x4a, 0x20, 0x26, 0x65, 0x56,
	0xf8, 0x03, 0x58, 0xd9, 0xf3, 0xfd, 0x71, 0x44, 0xd8, 0x4b, 0x9a, 0x04, 0xa9, 0x07, 0xcc, 0x27,
	0x7c, 0x76, 0xe9, 0x72, 0x6d, 0x50, 0xcd, 0xd2, 0x4b, 0x2c, 0x4d, 0xa6, 0xd0, 0x2d, 0xab, 0x3c,
	0x07, 0x63, 0x32, 0x27, 0x06, 0x7f, 0xac, 0x82, 0x86, 0x5d, 0xcf, 0x86, 0xc2, 0xb2, 0x91, 0xff,
	0xe6, 0x12, 0x43, 0x61, 0xcf, 0xf7, 0x8b, 0xa1, 0xb0, 0x6a, 0x85, 0x4a, 0x7d, 0x73, 0xdb, 0xa6,
	0x31, 0x8f, 0x63, 0x32, 0x2f, 0xab, 0x2b, 0xf1, 0x61, 0x1c, 0xf2, 0x98, 0x79, 0x2b, 0x45, 0x25,
	0x0a, 0x83, 0x14, 0x95, 0x68, 0xf7, 0x98, 0x38, 0xd7, 0xdd, 0x8d, 0x9f, 0x4e, 0x51, 0xe5, 0xd7,
	0x53, 0x54, 0xf9, 0xe7, 0x14, 0x55, 0xfe, 0xf8, 0x6d, 0x1b, 0xe4, 0x93, 0xee, 0x00, 0xab, 0x2b,
	0x73, 0x97, 0x07, 0x3f, 0x03, 0xd7, 0x0f, 0x45, 0xcc, 0x87, 0x2c, 0x31, 0x73, 0xaf, 0xde, 0x79,
	0x4f, 0xcf, 0x91, 0xc8, 0x42, 0xc5, 0x1c, 0x71, 0x00, 0x26, 0x33, 0x6f, 0x78, 0x0f, 0x2c, 0x1d,
	0x04, 0x2c, 0x96, 0x5c, 0xda, 0xc9, 0x55, 0xef, 0xa0, 0xa9, 0x42, 0x4b, 0xdc, 0x61, 0x99, 0x42,
	0x6b, 0x36, 0x74, 0x86, 0x60, 0x92, 0x07, 0x68, 0xd5, 0x67, 0xac, 0x9f, 0x72, 0xc9, 0xcc, 0x18,
	0x72, 0xaa, 0x2f, 0x2d, 0x54, 0xa8, 0x3a, 0x00, 0x93, 0x99, 0xb7, 0xae, 0xea, 0x23, 0xe6, 0x8f,
	0x13, 0x2e, 0x27, 0xfb, 0x22, 0x96, 0xd4, 0x97, 0x66, 0xb4, 0xd4, 0x6d, 0x55, 0xa7, 0xce, 0xd4,
	0xf3, 0xad, 0xad, 0xa8, 0xea, 0x45, 0x0b, 0x26, 0x8b, 0x3c, 0x3a, 0xa7, 0x2e, 0x93, 0x94, 0x87,
	0xa9, 0x19, 0x31, 0x2e, 0xa7, 0xc0, 0x42, 0x45, 0x4e, 0x0e, 0xc0, 0x64, 0xe6, 0xbd, 0xbb, 0x52,
	0xfe, 0xdc, 0xf8, 0xf7, 0x6b, 0xa0, 0xf6, 0x88, 0x26, 0x34, 0x4a, 0xe1, 0xb7, 0xa0, 0x91, 0xb7,
	0x8e, 0x19, 0x03, 0xf6, 0x65, 0xf9, 0xc2, 0x15, 0x51, 0xc3, 0x8c, 0x81, 0xee, 0x38, 0xa1, 0xfa,
	0x26, 0x74, 0x91, 0x14, 0xbd, 0xe7, 0xfa, 0xff, 0xf6, 0x62, 0x4f, 0xda, 0xa6, 0x9f, 0xa7, 0x85,
	0x3d, 0xd0, 0x38, 0xa4, 0x27, 0xf9, 0x25, 0xa7, 0xee, 0x25, 0xf9, 0xdc, 0xe9, 0xd4, 0xc6, 0x3c,
	0x96, 0x1f, 0x7f, 0xaa, 0x05, 0x22, 0x7a, 0xd2, 0xcb, 0xdb, 0xb4, 0x54, 0x85, 0xf3, 0x38, 0x26,
	0xf3, 0x7c, 0xf0, 0x08, 0x80, 0x43, 0x7a, 0x72, 0x3f, 0x96, 0x09, 0x67, 0xb3, 0x87, 0x63, 0xe7,
	0x02, 0xfb, 0xb2, 0x66, 0x61, 0xd6, 0xa9, 0xe8, 0xf0, 0x12, 0x88, 0x49, 0x89, 0x06, 0xee, 0x81,
	0xba, 0x7e, 0x06, 0xba, 0x2c, 0x16, 0x91, 0xbb, 0xc4, 0xf7, 0xa7, 0x0a, 0x01, 0x7d, 0xb2, 0x5e,
	0xa0, 0xd1, 0x4c, 0xa1, 0x9b, 0x96, 0xa4, 0xc0, 0x30, 0x29, 0xa2, 0xa0, 0x00, 0x37, 0x1f, 0xf0,
	0x54, 0x8a, 0x84, 0xfb, 0x34, 0x9c, 0xa5, 0x67, 0xdf, 0x87, 0xbd, 0x0b, 0xe9, 0xc1, 0xe3, 0xdc,
	0xb5, 0x94, 0xe5, 0xba, 0x15, 0xb8, 0x68, 0xc3, 0xe4, 0x22, 0x37, 0xf4, 0xc1, 0xea, 0x21, 0x3d,
	0xe9, 0xb2, 0x90, 0x0d, 0xcc, 0xa5, 0xa5, 0xe6, 0x81, 0x58, 0xe9, 0xdc, 0xbb, 0xa0, 0xb6, 0xa6,
	0xcf, 0x1d, 0x14, 0x8e, 0x99, 0x42, 0x77, 0x8a, 0x0f, 0x52, 0x32, 0x60, 0xb2, 0x40, 0x39, 0x5f,
	0x4f, 0x9d, 0xc3, 0x57, 0x67, 0xcd, 0xea, 0xeb, 0xb3, 0x66, 0xf5, 0xef, 0xb3, 0x66, 0xf5, 0x97,
	0xf3, 0x66, 0xe5, 0xf5, 0x79, 0xb3, 0xf2, 0xe7, 0x79, 0xb3, 0xf2, 0x7c, 0xa7, 0xcf, 0x65, 0x7f,
	0xec, 0x0f, 0x99, 0x6c, 0x89, 0x64, 0xd0, 0x0e, 0x98, 0xcf, 0x23, 0x1a, 0x4a, 0x46, 0xa3, 0xf6,
	0x40, 0x6c, 0xc7, 0x22, 0x60, 0xed, 0x93, 0xe2, 0x4f, 0x93, 0x9d, 0x4a, 0xfd, 0x9a, 0xf9, 0xff,
	0xb3, 0xf3, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x83, 0xef, 0xcf, 0x58, 0x09, 0x00, 0x00,
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Online {
		i--
		if m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	{
		size := m.RewardAddress.Size()
		i -= size
		if _, err := m.RewardAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.AccumRewards.Size()
		i -= size
		if _, err := m.AccumRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.UnbondingHeight != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.UnbondingHeight))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.UnbondingCompletionTime.Size()
		i -= size
		if _, err := m.UnbondingCompletionTime.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Commission.Size()
		i -= size
		if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Status.Size()
		i -= size
		if _, err := m.Status.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.PubKey.Size()
		i -= size
		if _, err := m.PubKey.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ValAddress.Size()
		i -= size
		if _, err := m.ValAddress.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Description) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Description) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Description) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Details) > 0 {
		i -= len(m.Details)
		copy(dAtA[i:], m.Details)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Details)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SecurityContact) > 0 {
		i -= len(m.SecurityContact)
		copy(dAtA[i:], m.SecurityContact)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.SecurityContact)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxDelegations.Size()
		i -= size
		if _, err := m.MaxDelegations.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.HistoricalEntries.Size()
		i -= size
		if _, err := m.HistoricalEntries.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.BondDenom) > 0 {
		i -= len(m.BondDenom)
		copy(dAtA[i:], m.BondDenom)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.BondDenom)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.MaxEntries.Size()
		i -= size
		if _, err := m.MaxEntries.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MaxValidators.Size()
		i -= size
		if _, err := m.MaxValidators.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.UnbondingTime.Size()
		i -= size
		if _, err := m.UnbondingTime.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ValAddress.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.PubKey.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.Tokens.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.Status.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovValidator(uint64(l))
	if m.Jailed {
		n += 2
	}
	l = m.UnbondingCompletionTime.Size()
	n += 1 + l + sovValidator(uint64(l))
	if m.UnbondingHeight != 0 {
		n += 1 + sovValidator(uint64(m.UnbondingHeight))
	}
	l = m.Description.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.AccumRewards.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.RewardAddress.Size()
	n += 1 + l + sovValidator(uint64(l))
	if m.Online {
		n += 2
	}
	return n
}

func (m *Description) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.SecurityContact)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Details)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UnbondingTime.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.MaxValidators.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.MaxEntries.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = len(m.BondDenom)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = m.HistoricalEntries.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.MaxDelegations.Size()
	n += 1 + l + sovValidator(uint64(l))
	return n
}

func sovValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingCompletionTime", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnbondingCompletionTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingHeight", wireType)
			}
			m.UnbondingHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumRewards", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccumRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Description) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Description: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Description: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityContact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SecurityContact = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnbondingTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidators", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxValidators.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEntries", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxEntries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalEntries", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HistoricalEntries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelegations", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxDelegations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidator = fmt.Errorf("proto: unexpected end of group")
)
