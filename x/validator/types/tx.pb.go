// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validator/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgDeclareCandidate struct {
	Commission    github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,1,opt,name=Commission,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission" yaml:"commission"`
	ValidatorAddr string                                  `protobuf:"bytes,2,opt,name=ValidatorAddr,proto3" json:"validator_addr" yaml:"validator_addr"`
	RewardAddr    string                                  `protobuf:"bytes,3,opt,name=RewardAddr,proto3" json:"reward_addr" yaml:"reward_addr"`
	Stake         github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,opt,name=Stake,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"stake" yaml:"stake"`
	Description   Description                             `protobuf:"bytes,5,opt,name=Description,proto3" json:"description" yaml:"description"`
	PubKey        *types.Any                              `protobuf:"bytes,6,opt,name=PubKey,proto3" json:"pub_key" yaml:"pub_key"`
}

func (m *MsgDeclareCandidate) Reset()         { *m = MsgDeclareCandidate{} }
func (m *MsgDeclareCandidate) String() string { return proto.CompactTextString(m) }
func (*MsgDeclareCandidate) ProtoMessage()    {}
func (*MsgDeclareCandidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{0}
}
func (m *MsgDeclareCandidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeclareCandidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeclareCandidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeclareCandidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeclareCandidate.Merge(m, src)
}
func (m *MsgDeclareCandidate) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeclareCandidate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeclareCandidate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeclareCandidate proto.InternalMessageInfo

type MsgDeclareCandidateResponse struct {
}

func (m *MsgDeclareCandidateResponse) Reset()         { *m = MsgDeclareCandidateResponse{} }
func (m *MsgDeclareCandidateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeclareCandidateResponse) ProtoMessage()    {}
func (*MsgDeclareCandidateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{1}
}
func (m *MsgDeclareCandidateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeclareCandidateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeclareCandidateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeclareCandidateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeclareCandidateResponse.Merge(m, src)
}
func (m *MsgDeclareCandidateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeclareCandidateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeclareCandidateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeclareCandidateResponse proto.InternalMessageInfo

type MsgDelegate struct {
	DelegatorAddress string                                  `protobuf:"bytes,1,opt,name=DelegatorAddress,proto3" json:"delegator_address" yaml:"delegator_address"`
	ValidatorAddress string                                  `protobuf:"bytes,2,opt,name=ValidatorAddress,proto3" json:"validator_address" yaml:"validator_address"`
	Coin             github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=Coin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin" yaml:"coin"`
}

func (m *MsgDelegate) Reset()         { *m = MsgDelegate{} }
func (m *MsgDelegate) String() string { return proto.CompactTextString(m) }
func (*MsgDelegate) ProtoMessage()    {}
func (*MsgDelegate) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{2}
}
func (m *MsgDelegate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegate.Merge(m, src)
}
func (m *MsgDelegate) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegate proto.InternalMessageInfo

type MsgDelegateResponse struct {
}

func (m *MsgDelegateResponse) Reset()         { *m = MsgDelegateResponse{} }
func (m *MsgDelegateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateResponse) ProtoMessage()    {}
func (*MsgDelegateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{3}
}
func (m *MsgDelegateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateResponse.Merge(m, src)
}
func (m *MsgDelegateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateResponse proto.InternalMessageInfo

type MsgDelegateNFT struct {
	DelegatorAddress string                                 `protobuf:"bytes,1,opt,name=DelegatorAddress,proto3" json:"delegator_address" yaml:"delegator_address"`
	ValidatorAddress string                                 `protobuf:"bytes,2,opt,name=ValidatorAddress,proto3" json:"validator_address" yaml:"validator_address"`
	TokenID          string                                 `protobuf:"bytes,3,opt,name=TokenID,proto3" json:"token_id" yaml:"token_id"`
	Denom            string                                 `protobuf:"bytes,4,opt,name=Denom,proto3" json:"denom" yaml:"denom"`
	Quantity         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=Quantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"quantity" yaml:"quantity"`
}

func (m *MsgDelegateNFT) Reset()         { *m = MsgDelegateNFT{} }
func (m *MsgDelegateNFT) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateNFT) ProtoMessage()    {}
func (*MsgDelegateNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{4}
}
func (m *MsgDelegateNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateNFT.Merge(m, src)
}
func (m *MsgDelegateNFT) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateNFT.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateNFT proto.InternalMessageInfo

type MsgDelegateNFTResponse struct {
}

func (m *MsgDelegateNFTResponse) Reset()         { *m = MsgDelegateNFTResponse{} }
func (m *MsgDelegateNFTResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateNFTResponse) ProtoMessage()    {}
func (*MsgDelegateNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{5}
}
func (m *MsgDelegateNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateNFTResponse.Merge(m, src)
}
func (m *MsgDelegateNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateNFTResponse proto.InternalMessageInfo

type MsgSetOnline struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=ValidatorAddress,proto3" json:"validator_address" yaml:"validator_address"`
}

func (m *MsgSetOnline) Reset()         { *m = MsgSetOnline{} }
func (m *MsgSetOnline) String() string { return proto.CompactTextString(m) }
func (*MsgSetOnline) ProtoMessage()    {}
func (*MsgSetOnline) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{6}
}
func (m *MsgSetOnline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOnline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOnline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOnline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOnline.Merge(m, src)
}
func (m *MsgSetOnline) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOnline) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOnline.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOnline proto.InternalMessageInfo

type MsgSetOnlineResponse struct {
}

func (m *MsgSetOnlineResponse) Reset()         { *m = MsgSetOnlineResponse{} }
func (m *MsgSetOnlineResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetOnlineResponse) ProtoMessage()    {}
func (*MsgSetOnlineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{7}
}
func (m *MsgSetOnlineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOnlineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOnlineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOnlineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOnlineResponse.Merge(m, src)
}
func (m *MsgSetOnlineResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOnlineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOnlineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOnlineResponse proto.InternalMessageInfo

type MsgSetOffline struct {
	ValidatorAddress string `protobuf:"bytes,2,opt,name=ValidatorAddress,proto3" json:"validator_address" yaml:"validator_address"`
}

func (m *MsgSetOffline) Reset()         { *m = MsgSetOffline{} }
func (m *MsgSetOffline) String() string { return proto.CompactTextString(m) }
func (*MsgSetOffline) ProtoMessage()    {}
func (*MsgSetOffline) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{8}
}
func (m *MsgSetOffline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOffline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOffline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOffline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOffline.Merge(m, src)
}
func (m *MsgSetOffline) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOffline) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOffline.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOffline proto.InternalMessageInfo

type MsgSetOfflineResponse struct {
}

func (m *MsgSetOfflineResponse) Reset()         { *m = MsgSetOfflineResponse{} }
func (m *MsgSetOfflineResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetOfflineResponse) ProtoMessage()    {}
func (*MsgSetOfflineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{9}
}
func (m *MsgSetOfflineResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOfflineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOfflineResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOfflineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOfflineResponse.Merge(m, src)
}
func (m *MsgSetOfflineResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOfflineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOfflineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOfflineResponse proto.InternalMessageInfo

type MsgUnbond struct {
	ValidatorAddress string                                  `protobuf:"bytes,1,opt,name=ValidatorAddress,proto3" json:"validator_address" yaml:"validator_address"`
	DelegatorAddress string                                  `protobuf:"bytes,2,opt,name=DelegatorAddress,proto3" json:"delegator_address" yaml:"delegator_address"`
	Coin             github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=Coin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin" yaml:"coin"`
}

func (m *MsgUnbond) Reset()         { *m = MsgUnbond{} }
func (m *MsgUnbond) String() string { return proto.CompactTextString(m) }
func (*MsgUnbond) ProtoMessage()    {}
func (*MsgUnbond) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{10}
}
func (m *MsgUnbond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnbond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnbond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnbond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnbond.Merge(m, src)
}
func (m *MsgUnbond) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnbond) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnbond.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnbond proto.InternalMessageInfo

type MsgUnbondResponse struct {
}

func (m *MsgUnbondResponse) Reset()         { *m = MsgUnbondResponse{} }
func (m *MsgUnbondResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnbondResponse) ProtoMessage()    {}
func (*MsgUnbondResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{11}
}
func (m *MsgUnbondResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnbondResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnbondResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnbondResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnbondResponse.Merge(m, src)
}
func (m *MsgUnbondResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnbondResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnbondResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnbondResponse proto.InternalMessageInfo

type MsgUnbondNFT struct {
	ValidatorAddress string                                 `protobuf:"bytes,1,opt,name=ValidatorAddress,proto3" json:"validator_address" yaml:"validator_address"`
	DelegatorAddress string                                 `protobuf:"bytes,2,opt,name=DelegatorAddress,proto3" json:"delegator_address" yaml:"delegator_address"`
	TokenID          string                                 `protobuf:"bytes,3,opt,name=TokenID,proto3" json:"token_id" yaml:"token_id"`
	Denom            string                                 `protobuf:"bytes,4,opt,name=Denom,proto3" json:"denom" yaml:"denom"`
	Quantity         github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=Quantity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"quantity" yaml:"quantity"`
}

func (m *MsgUnbondNFT) Reset()         { *m = MsgUnbondNFT{} }
func (m *MsgUnbondNFT) String() string { return proto.CompactTextString(m) }
func (*MsgUnbondNFT) ProtoMessage()    {}
func (*MsgUnbondNFT) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{12}
}
func (m *MsgUnbondNFT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnbondNFT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnbondNFT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnbondNFT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnbondNFT.Merge(m, src)
}
func (m *MsgUnbondNFT) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnbondNFT) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnbondNFT.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnbondNFT proto.InternalMessageInfo

type MsgUnbondNFTResponse struct {
}

func (m *MsgUnbondNFTResponse) Reset()         { *m = MsgUnbondNFTResponse{} }
func (m *MsgUnbondNFTResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnbondNFTResponse) ProtoMessage()    {}
func (*MsgUnbondNFTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{13}
}
func (m *MsgUnbondNFTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnbondNFTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnbondNFTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnbondNFTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnbondNFTResponse.Merge(m, src)
}
func (m *MsgUnbondNFTResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnbondNFTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnbondNFTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnbondNFTResponse proto.InternalMessageInfo

type MsgEditCandidate struct {
	ValidatorAddress string      `protobuf:"bytes,1,opt,name=ValidatorAddress,proto3" json:"validator_address" yaml:"validator_address"`
	RewardAddress    string      `protobuf:"bytes,2,opt,name=RewardAddress,proto3" json:"reward_address" yaml:"reward_address"`
	Description      Description `protobuf:"bytes,3,opt,name=Description,proto3" json:"description" yaml:"description"`
}

func (m *MsgEditCandidate) Reset()         { *m = MsgEditCandidate{} }
func (m *MsgEditCandidate) String() string { return proto.CompactTextString(m) }
func (*MsgEditCandidate) ProtoMessage()    {}
func (*MsgEditCandidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{14}
}
func (m *MsgEditCandidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditCandidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditCandidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditCandidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditCandidate.Merge(m, src)
}
func (m *MsgEditCandidate) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditCandidate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditCandidate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditCandidate proto.InternalMessageInfo

func (m *MsgEditCandidate) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgEditCandidate) GetRewardAddress() string {
	if m != nil {
		return m.RewardAddress
	}
	return ""
}

func (m *MsgEditCandidate) GetDescription() Description {
	if m != nil {
		return m.Description
	}
	return Description{}
}

type MsgEditCandidateResponse struct {
}

func (m *MsgEditCandidateResponse) Reset()         { *m = MsgEditCandidateResponse{} }
func (m *MsgEditCandidateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEditCandidateResponse) ProtoMessage()    {}
func (*MsgEditCandidateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3d1df81e3a65fd6a, []int{15}
}
func (m *MsgEditCandidateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditCandidateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditCandidateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditCandidateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditCandidateResponse.Merge(m, src)
}
func (m *MsgEditCandidateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditCandidateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditCandidateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditCandidateResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDeclareCandidate)(nil), "validator.MsgDeclareCandidate")
	proto.RegisterType((*MsgDeclareCandidateResponse)(nil), "validator.MsgDeclareCandidateResponse")
	proto.RegisterType((*MsgDelegate)(nil), "validator.MsgDelegate")
	proto.RegisterType((*MsgDelegateResponse)(nil), "validator.MsgDelegateResponse")
	proto.RegisterType((*MsgDelegateNFT)(nil), "validator.MsgDelegateNFT")
	proto.RegisterType((*MsgDelegateNFTResponse)(nil), "validator.MsgDelegateNFTResponse")
	proto.RegisterType((*MsgSetOnline)(nil), "validator.MsgSetOnline")
	proto.RegisterType((*MsgSetOnlineResponse)(nil), "validator.MsgSetOnlineResponse")
	proto.RegisterType((*MsgSetOffline)(nil), "validator.MsgSetOffline")
	proto.RegisterType((*MsgSetOfflineResponse)(nil), "validator.MsgSetOfflineResponse")
	proto.RegisterType((*MsgUnbond)(nil), "validator.MsgUnbond")
	proto.RegisterType((*MsgUnbondResponse)(nil), "validator.MsgUnbondResponse")
	proto.RegisterType((*MsgUnbondNFT)(nil), "validator.MsgUnbondNFT")
	proto.RegisterType((*MsgUnbondNFTResponse)(nil), "validator.MsgUnbondNFTResponse")
	proto.RegisterType((*MsgEditCandidate)(nil), "validator.MsgEditCandidate")
	proto.RegisterType((*MsgEditCandidateResponse)(nil), "validator.MsgEditCandidateResponse")
}

func init() { proto.RegisterFile("validator/tx.proto", fileDescriptor_3d1df81e3a65fd6a) }

var fileDescriptor_3d1df81e3a65fd6a = []byte{
	// 1022 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0x4d, 0x6f, 0xdc, 0x44,
	0x18, 0xde, 0xaf, 0xa4, 0xd9, 0xd9, 0x24, 0x34, 0xee, 0x26, 0xd9, 0xb8, 0xb0, 0x13, 0x8c, 0x28,
	0x41, 0x28, 0xb6, 0x68, 0xc5, 0x81, 0x5e, 0x50, 0x9d, 0x4d, 0xd4, 0xaa, 0xda, 0x42, 0xdc, 0xc0,
	0x21, 0x12, 0x44, 0x5e, 0x7b, 0x62, 0xac, 0xdd, 0xf5, 0x6c, 0x3d, 0x5e, 0x9a, 0xfd, 0x07, 0x1c,
	0xf9, 0x09, 0xbd, 0x72, 0x40, 0x08, 0x89, 0x1f, 0x51, 0x71, 0xea, 0x09, 0x21, 0x0e, 0x16, 0x4a,
	0x38, 0xa0, 0x3d, 0xee, 0x2f, 0x40, 0x33, 0x63, 0x8f, 0xed, 0x5d, 0x6f, 0x45, 0xa5, 0x06, 0x29,
	0x3d, 0xad, 0xfd, 0x3c, 0x33, 0xcf, 0xcc, 0x3c, 0xef, 0xfb, 0x8e, 0xdf, 0x05, 0xd2, 0x77, 0x66,
	0xcf, 0xb5, 0xcd, 0x00, 0xfb, 0x5a, 0x70, 0xa6, 0x0e, 0x7c, 0x1c, 0x60, 0xa9, 0x2a, 0x30, 0xb9,
	0xee, 0x60, 0x07, 0x33, 0x54, 0xa3, 0x4f, 0x7c, 0x80, 0xbc, 0x95, 0x4c, 0x12, 0x4f, 0x31, 0xe5,
	0x60, 0xec, 0xf4, 0x90, 0xc6, 0xde, 0x3a, 0xc3, 0x53, 0xcd, 0xf4, 0x46, 0x31, 0x65, 0x61, 0xd2,
	0xc7, 0xe4, 0x84, 0xcb, 0xf1, 0x17, 0x4e, 0x29, 0xbf, 0x57, 0xc0, 0x8d, 0x36, 0x71, 0x5a, 0xc8,
	0xea, 0x99, 0x3e, 0xda, 0x33, 0x3d, 0x9b, 0x8a, 0x22, 0xe9, 0x09, 0x00, 0x7b, 0xb8, 0xdf, 0x77,
	0x09, 0x71, 0xb1, 0xd7, 0x28, 0x6e, 0x17, 0x77, 0x96, 0xf5, 0xc3, 0xe7, 0x21, 0x2c, 0xfc, 0x19,
	0xc2, 0x5b, 0x8e, 0x1b, 0x7c, 0x3b, 0xec, 0xa8, 0x16, 0xee, 0x47, 0x62, 0xd1, 0xcf, 0x2e, 0xb1,
	0xbb, 0x5a, 0x30, 0x1a, 0x20, 0xa2, 0xb6, 0x90, 0x35, 0x0e, 0x21, 0xb0, 0x84, 0xc6, 0x24, 0x84,
	0x6b, 0x23, 0xb3, 0xdf, 0xbb, 0xab, 0x24, 0x98, 0x62, 0xa4, 0x16, 0x91, 0x0e, 0xc1, 0xca, 0x57,
	0xf1, 0x99, 0xee, 0xd9, 0xb6, 0xdf, 0x28, 0x6d, 0x17, 0x77, 0xaa, 0xfa, 0x47, 0xe3, 0x10, 0xae,
	0x8a, 0xc3, 0x9e, 0x98, 0xb6, 0xed, 0x4f, 0x42, 0xb8, 0xce, 0xb5, 0xb2, 0xb8, 0x62, 0x64, 0x15,
	0xa4, 0x7d, 0x00, 0x0c, 0xf4, 0xd4, 0xf4, 0x6d, 0xa6, 0x57, 0x66, 0x7a, 0xef, 0x8f, 0x43, 0x58,
	0xf3, 0x19, 0x1a, 0x8b, 0x49, 0x5c, 0x2c, 0x05, 0x2a, 0x46, 0x6a, 0xa2, 0xf4, 0x0d, 0x58, 0x78,
	0x1c, 0x98, 0x5d, 0xd4, 0xa8, 0x30, 0x1f, 0xee, 0x47, 0x3e, 0x7c, 0xf0, 0x1f, 0x7c, 0xd8, 0xc3,
	0xae, 0x37, 0x0e, 0xe1, 0x02, 0xa1, 0xf3, 0x27, 0x21, 0x5c, 0xe6, 0x4b, 0xb1, 0x57, 0xc5, 0xe0,
	0xb2, 0x92, 0x05, 0x6a, 0x2d, 0x44, 0x2c, 0xdf, 0x1d, 0x04, 0xd4, 0xed, 0x85, 0xed, 0xe2, 0x4e,
	0xed, 0xf6, 0x86, 0x9a, 0x44, 0x38, 0xc5, 0xea, 0x1f, 0xd2, 0xd5, 0xe9, 0x19, 0xec, 0x04, 0x4c,
	0xce, 0x90, 0x02, 0x15, 0x23, 0xad, 0x2a, 0x59, 0x60, 0xf1, 0x8b, 0x61, 0xe7, 0x21, 0x1a, 0x35,
	0x16, 0x99, 0x7e, 0x5d, 0xe5, 0x09, 0xa3, 0xc6, 0x09, 0xa3, 0xde, 0xf3, 0x46, 0xfa, 0x27, 0xe3,
	0x10, 0x5e, 0x1b, 0x0c, 0x3b, 0x27, 0x5d, 0x34, 0x9a, 0x84, 0x70, 0x95, 0xab, 0x46, 0x80, 0xf2,
	0xdb, 0xaf, 0xbb, 0xf5, 0x28, 0x7d, 0x2c, 0x7f, 0x34, 0x08, 0xb0, 0xca, 0x25, 0x8d, 0x48, 0xfa,
	0xee, 0xd2, 0xf7, 0xcf, 0x60, 0xe1, 0x9f, 0x67, 0xb0, 0xa0, 0xbc, 0x03, 0x6e, 0xe6, 0xe4, 0x95,
	0x81, 0xc8, 0x00, 0x7b, 0x04, 0x29, 0xbf, 0x94, 0x40, 0x8d, 0xf1, 0x3d, 0xe4, 0xd0, 0x7c, 0xfb,
	0x1a, 0x5c, 0x8f, 0x9e, 0x79, 0xe8, 0x10, 0x21, 0x2c, 0xeb, 0xaa, 0xfa, 0xc7, 0xe3, 0x10, 0xae,
	0xd9, 0x31, 0xc7, 0xa2, 0x83, 0x08, 0x99, 0x84, 0xb0, 0x11, 0x9f, 0x78, 0x8a, 0x52, 0x8c, 0x19,
	0x29, 0x2a, 0x9f, 0xc9, 0x0c, 0x2a, 0x5f, 0x4a, 0xe4, 0xb3, 0x69, 0x94, 0x91, 0x9f, 0xa1, 0x14,
	0x63, 0x46, 0x4a, 0x3a, 0x06, 0x15, 0x1a, 0xe8, 0x28, 0xc3, 0x0e, 0x5e, 0x3d, 0x3f, 0x2a, 0x16,
	0x76, 0x69, 0x14, 0x6b, 0x71, 0x89, 0xb8, 0x9e, 0x62, 0x30, 0xcd, 0x94, 0xa5, 0xeb, 0x51, 0xa9,
	0x72, 0xcb, 0x84, 0x95, 0x3f, 0x97, 0xc1, 0x6a, 0x0a, 0x7f, 0x74, 0x70, 0x74, 0xc5, 0xdd, 0xfc,
	0x14, 0x5c, 0x3b, 0xc2, 0x5d, 0xe4, 0x3d, 0x68, 0x45, 0x86, 0xc2, 0x71, 0x08, 0x97, 0x02, 0x0a,
	0x9d, 0xb8, 0xf6, 0x24, 0x84, 0x6f, 0x71, 0xb1, 0x18, 0x51, 0x8c, 0x78, 0xbc, 0xa4, 0x81, 0x85,
	0x16, 0xf2, 0x70, 0x9f, 0x55, 0x6a, 0x55, 0xdf, 0xa2, 0xa5, 0x67, 0x53, 0x20, 0x29, 0x3d, 0xf6,
	0xaa, 0x18, 0x7c, 0x9c, 0xe4, 0x82, 0xa5, 0xc3, 0xa1, 0xe9, 0x05, 0x6e, 0x30, 0x62, 0x75, 0xb7,
	0xac, 0xb7, 0x5f, 0xe1, 0x96, 0x7b, 0xe0, 0x05, 0x74, 0x6b, 0x4f, 0x22, 0x85, 0x64, 0x6b, 0x31,
	0xa2, 0x18, 0x42, 0x3e, 0x15, 0xc8, 0x06, 0xd8, 0xc8, 0x06, 0x4c, 0xc4, 0xf2, 0x29, 0x58, 0x6e,
	0x13, 0xe7, 0x31, 0x0a, 0x3e, 0xf7, 0x7a, 0xae, 0x87, 0x72, 0x9d, 0x2e, 0xbe, 0x36, 0xa7, 0x53,
	0x5b, 0xda, 0x00, 0xf5, 0xf4, 0xc2, 0x62, 0x43, 0x67, 0x60, 0x25, 0xc2, 0x4f, 0x4f, 0xe7, 0xee,
	0xa8, 0x74, 0x19, 0x3b, 0xda, 0x04, 0xeb, 0x99, 0x95, 0x93, 0x7c, 0x2f, 0x81, 0x6a, 0x9b, 0x38,
	0x5f, 0x7a, 0x1d, 0xec, 0xd9, 0x97, 0xec, 0x50, 0x6e, 0x25, 0x95, 0x5e, 0x5f, 0x25, 0xfd, 0x3f,
	0x17, 0xc7, 0x0d, 0xb0, 0x26, 0x0c, 0x13, 0x36, 0xfe, 0x54, 0x66, 0xb9, 0xc6, 0xd1, 0xe8, 0xd2,
	0xb8, 0xc2, 0x4e, 0xbe, 0xf1, 0x97, 0x06, 0xaf, 0x50, 0x11, 0x2e, 0x11, 0xc7, 0x1f, 0x4b, 0xe0,
	0x7a, 0x9b, 0x38, 0xfb, 0xb6, 0x1b, 0x24, 0xed, 0xdb, 0x25, 0xc7, 0xf2, 0x10, 0xac, 0x24, 0xed,
	0x51, 0x12, 0x48, 0xd6, 0xaa, 0xa5, 0xba, 0x28, 0x2e, 0xbc, 0x3e, 0xd3, 0x5d, 0x31, 0xd5, 0xac,
	0xc2, 0x74, 0x0f, 0x54, 0xbe, 0x8c, 0x1e, 0x48, 0x91, 0x41, 0x63, 0xda, 0xaa, 0xd8, 0xc7, 0xdb,
	0x7f, 0x57, 0x40, 0xb9, 0x4d, 0x1c, 0xe9, 0x98, 0xe6, 0xe9, 0x54, 0x37, 0xdc, 0x4c, 0xed, 0x23,
	0xa7, 0xab, 0x91, 0x6f, 0xbd, 0x9c, 0x8f, 0xd7, 0x90, 0x74, 0xb0, 0x24, 0x3a, 0x9e, 0x8d, 0xe9,
	0x39, 0x1c, 0x97, 0x9b, 0xf9, 0xb8, 0xd0, 0x78, 0x48, 0x8d, 0x4a, 0x3e, 0xf5, 0x5b, 0xf9, 0xc3,
	0x1f, 0x1d, 0x1c, 0xc9, 0xef, 0xce, 0xa5, 0x84, 0xd8, 0x3e, 0xa8, 0x26, 0x1f, 0x9b, 0xcd, 0xec,
	0x78, 0x41, 0xc8, 0x70, 0x0e, 0x21, 0x64, 0xee, 0x03, 0x90, 0xfa, 0x44, 0x34, 0x66, 0x87, 0x73,
	0x46, 0xde, 0x9e, 0xc7, 0x08, 0xa5, 0xcf, 0xd2, 0x77, 0x7b, 0x3d, 0x3b, 0x9c, 0xa3, 0xf2, 0xdb,
	0x79, 0x68, 0x6a, 0x2b, 0xd9, 0x5b, 0x6d, 0x33, 0x6f, 0x34, 0x75, 0x07, 0xce, 0x21, 0x84, 0xd2,
	0x51, 0x4e, 0x5d, 0xdd, 0xcc, 0x4e, 0xca, 0x90, 0xf2, 0x7b, 0x2f, 0x21, 0x63, 0x55, 0xbd, 0xfd,
	0xfc, 0xbc, 0x59, 0x7c, 0x71, 0xde, 0x2c, 0xfe, 0x75, 0xde, 0x2c, 0xfe, 0x70, 0xd1, 0x2c, 0xbc,
	0xb8, 0x68, 0x16, 0xfe, 0xb8, 0x68, 0x16, 0x8e, 0xef, 0x74, 0xdc, 0xa0, 0x33, 0xb4, 0xba, 0x28,
	0x50, 0xb1, 0xef, 0x68, 0x36, 0xb2, 0xdc, 0xbe, 0xd9, 0x0b, 0x90, 0xd9, 0xd7, 0x1c, 0xbc, 0xeb,
	0x61, 0x1b, 0x69, 0x67, 0x5a, 0xea, 0x4f, 0x23, 0xbd, 0x4c, 0x3a, 0x8b, 0xac, 0x7b, 0xbf, 0xf3,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x37, 0x41, 0x0b, 0x4e, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	DeclareCandidate(ctx context.Context, in *MsgDeclareCandidate, opts ...grpc.CallOption) (*MsgDeclareCandidateResponse, error)
	Delegate(ctx context.Context, in *MsgDelegate, opts ...grpc.CallOption) (*MsgDelegateResponse, error)
	DelegateNFT(ctx context.Context, in *MsgDelegateNFT, opts ...grpc.CallOption) (*MsgDelegateNFTResponse, error)
	SetOnline(ctx context.Context, in *MsgSetOnline, opts ...grpc.CallOption) (*MsgSetOnlineResponse, error)
	SetOffline(ctx context.Context, in *MsgSetOffline, opts ...grpc.CallOption) (*MsgSetOfflineResponse, error)
	MsgUnbond(ctx context.Context, in *MsgUnbond, opts ...grpc.CallOption) (*MsgUnbondResponse, error)
	MsgUnbondNFT(ctx context.Context, in *MsgUnbondNFT, opts ...grpc.CallOption) (*MsgUnbondNFTResponse, error)
	MsgEditCandidate(ctx context.Context, in *MsgEditCandidate, opts ...grpc.CallOption) (*MsgEditCandidateResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DeclareCandidate(ctx context.Context, in *MsgDeclareCandidate, opts ...grpc.CallOption) (*MsgDeclareCandidateResponse, error) {
	out := new(MsgDeclareCandidateResponse)
	err := c.cc.Invoke(ctx, "/validator.Msg/DeclareCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Delegate(ctx context.Context, in *MsgDelegate, opts ...grpc.CallOption) (*MsgDelegateResponse, error) {
	out := new(MsgDelegateResponse)
	err := c.cc.Invoke(ctx, "/validator.Msg/Delegate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DelegateNFT(ctx context.Context, in *MsgDelegateNFT, opts ...grpc.CallOption) (*MsgDelegateNFTResponse, error) {
	out := new(MsgDelegateNFTResponse)
	err := c.cc.Invoke(ctx, "/validator.Msg/DelegateNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetOnline(ctx context.Context, in *MsgSetOnline, opts ...grpc.CallOption) (*MsgSetOnlineResponse, error) {
	out := new(MsgSetOnlineResponse)
	err := c.cc.Invoke(ctx, "/validator.Msg/SetOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetOffline(ctx context.Context, in *MsgSetOffline, opts ...grpc.CallOption) (*MsgSetOfflineResponse, error) {
	out := new(MsgSetOfflineResponse)
	err := c.cc.Invoke(ctx, "/validator.Msg/SetOffline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgUnbond(ctx context.Context, in *MsgUnbond, opts ...grpc.CallOption) (*MsgUnbondResponse, error) {
	out := new(MsgUnbondResponse)
	err := c.cc.Invoke(ctx, "/validator.Msg/MsgUnbond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgUnbondNFT(ctx context.Context, in *MsgUnbondNFT, opts ...grpc.CallOption) (*MsgUnbondNFTResponse, error) {
	out := new(MsgUnbondNFTResponse)
	err := c.cc.Invoke(ctx, "/validator.Msg/MsgUnbondNFT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MsgEditCandidate(ctx context.Context, in *MsgEditCandidate, opts ...grpc.CallOption) (*MsgEditCandidateResponse, error) {
	out := new(MsgEditCandidateResponse)
	err := c.cc.Invoke(ctx, "/validator.Msg/MsgEditCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	DeclareCandidate(context.Context, *MsgDeclareCandidate) (*MsgDeclareCandidateResponse, error)
	Delegate(context.Context, *MsgDelegate) (*MsgDelegateResponse, error)
	DelegateNFT(context.Context, *MsgDelegateNFT) (*MsgDelegateNFTResponse, error)
	SetOnline(context.Context, *MsgSetOnline) (*MsgSetOnlineResponse, error)
	SetOffline(context.Context, *MsgSetOffline) (*MsgSetOfflineResponse, error)
	MsgUnbond(context.Context, *MsgUnbond) (*MsgUnbondResponse, error)
	MsgUnbondNFT(context.Context, *MsgUnbondNFT) (*MsgUnbondNFTResponse, error)
	MsgEditCandidate(context.Context, *MsgEditCandidate) (*MsgEditCandidateResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DeclareCandidate(ctx context.Context, req *MsgDeclareCandidate) (*MsgDeclareCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclareCandidate not implemented")
}
func (*UnimplementedMsgServer) Delegate(ctx context.Context, req *MsgDelegate) (*MsgDelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delegate not implemented")
}
func (*UnimplementedMsgServer) DelegateNFT(ctx context.Context, req *MsgDelegateNFT) (*MsgDelegateNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateNFT not implemented")
}
func (*UnimplementedMsgServer) SetOnline(ctx context.Context, req *MsgSetOnline) (*MsgSetOnlineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOnline not implemented")
}
func (*UnimplementedMsgServer) SetOffline(ctx context.Context, req *MsgSetOffline) (*MsgSetOfflineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOffline not implemented")
}
func (*UnimplementedMsgServer) MsgUnbond(ctx context.Context, req *MsgUnbond) (*MsgUnbondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgUnbond not implemented")
}
func (*UnimplementedMsgServer) MsgUnbondNFT(ctx context.Context, req *MsgUnbondNFT) (*MsgUnbondNFTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgUnbondNFT not implemented")
}
func (*UnimplementedMsgServer) MsgEditCandidate(ctx context.Context, req *MsgEditCandidate) (*MsgEditCandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MsgEditCandidate not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DeclareCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeclareCandidate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeclareCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validator.Msg/DeclareCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeclareCandidate(ctx, req.(*MsgDeclareCandidate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Delegate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Delegate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validator.Msg/Delegate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Delegate(ctx, req.(*MsgDelegate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DelegateNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelegateNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validator.Msg/DelegateNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelegateNFT(ctx, req.(*MsgDelegateNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validator.Msg/SetOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetOnline(ctx, req.(*MsgSetOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetOffline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validator.Msg/SetOffline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetOffline(ctx, req.(*MsgSetOffline))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgUnbond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnbond)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgUnbond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validator.Msg/MsgUnbond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgUnbond(ctx, req.(*MsgUnbond))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgUnbondNFT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnbondNFT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgUnbondNFT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validator.Msg/MsgUnbondNFT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgUnbondNFT(ctx, req.(*MsgUnbondNFT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MsgEditCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEditCandidate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MsgEditCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/validator.Msg/MsgEditCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MsgEditCandidate(ctx, req.(*MsgEditCandidate))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "validator.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeclareCandidate",
			Handler:    _Msg_DeclareCandidate_Handler,
		},
		{
			MethodName: "Delegate",
			Handler:    _Msg_Delegate_Handler,
		},
		{
			MethodName: "DelegateNFT",
			Handler:    _Msg_DelegateNFT_Handler,
		},
		{
			MethodName: "SetOnline",
			Handler:    _Msg_SetOnline_Handler,
		},
		{
			MethodName: "SetOffline",
			Handler:    _Msg_SetOffline_Handler,
		},
		{
			MethodName: "MsgUnbond",
			Handler:    _Msg_MsgUnbond_Handler,
		},
		{
			MethodName: "MsgUnbondNFT",
			Handler:    _Msg_MsgUnbondNFT_Handler,
		},
		{
			MethodName: "MsgEditCandidate",
			Handler:    _Msg_MsgEditCandidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validator/tx.proto",
}

func (m *MsgDeclareCandidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeclareCandidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeclareCandidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Stake.Size()
		i -= size
		if _, err := m.Stake.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RewardAddr) > 0 {
		i -= len(m.RewardAddr)
		copy(dAtA[i:], m.RewardAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Commission.Size()
		i -= size
		if _, err := m.Commission.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgDeclareCandidateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeclareCandidateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeclareCandidateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDelegate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Coin.Size()
		i -= size
		if _, err := m.Coin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDelegateNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetOnline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOnline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOnline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetOnlineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOnlineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOnlineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetOffline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOffline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOffline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetOfflineResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOfflineResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOfflineResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnbond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnbond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnbond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Coin.Size()
		i -= size
		if _, err := m.Coin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnbondResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnbondResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnbondResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnbondNFT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnbondNFT) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnbondNFT) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Quantity.Size()
		i -= size
		if _, err := m.Quantity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenID) > 0 {
		i -= len(m.TokenID)
		copy(dAtA[i:], m.TokenID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TokenID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnbondNFTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnbondNFTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnbondNFTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEditCandidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditCandidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditCandidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditCandidateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditCandidateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditCandidateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDeclareCandidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Commission.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Stake.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Description.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeclareCandidateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDelegateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDelegateNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Quantity.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgDelegateNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetOnline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetOnlineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetOffline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetOfflineResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnbond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUnbondResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnbondNFT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TokenID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Quantity.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUnbondNFTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEditCandidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Description.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgEditCandidateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDeclareCandidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeclareCandidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeclareCandidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stake", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Stake.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &types.Any{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeclareCandidateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeclareCandidateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeclareCandidateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOnline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOnline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOnline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOnlineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOnlineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOnlineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOffline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOffline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOffline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOfflineResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOfflineResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOfflineResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnbond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnbond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnbond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnbondResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnbondResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnbondResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnbondNFT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnbondNFT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnbondNFT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantity", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnbondNFTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnbondNFTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnbondNFTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditCandidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditCandidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditCandidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditCandidateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditCandidateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditCandidateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
