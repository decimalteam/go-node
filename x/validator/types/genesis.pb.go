// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validator/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GenesisState struct {
	Params               Params                                 `protobuf:"bytes,1,opt,name=Params,proto3" json:"params" yaml:"params"`
	LastTotalPower       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=LastTotalPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"last_total_power" yaml:"last_total_power"`
	LastValidatorPowers  []LastValidatorPower                   `protobuf:"bytes,3,rep,name=LastValidatorPowers,proto3" json:"last_validator_powers" yaml:"last_validator_powers"`
	Validators           Validators                             `protobuf:"bytes,4,opt,name=Validators,proto3,customtype=Validators" json:"validators" yaml:"validators"`
	Delegations          Delegations                            `protobuf:"bytes,5,opt,name=Delegations,proto3,customtype=Delegations" json:"delegations" yaml:"delegations"`
	UnbondingDelegations []UnbondingDelegation                  `protobuf:"bytes,6,rep,name=UnbondingDelegations,proto3" json:"unbonding_delegations" yaml:"unbonding_delegations"`
	DelegationsNFT       DelegationsNFT                         `protobuf:"bytes,7,opt,name=DelegationsNFT,proto3,customtype=DelegationsNFT" json:"delegations_nft" yaml:"delegations_nft"`
	Exported             bool                                   `protobuf:"varint,8,opt,name=Exported,proto3" json:"exported" yaml:"exported"`
}

func (m *GenesisState) Reset()      { *m = GenesisState{} }
func (*GenesisState) ProtoMessage() {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_8143c6ee7ddaa59a, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

type LastValidatorPower struct {
	Address github_com_cosmos_cosmos_sdk_types.ValAddress `protobuf:"bytes,1,opt,name=Address,proto3,customtype=github.com/cosmos/cosmos-sdk/types.ValAddress" json:"Address"`
	Power   int64                                         `protobuf:"varint,2,opt,name=Power,proto3" json:"Power,omitempty"`
}

func (m *LastValidatorPower) Reset()      { *m = LastValidatorPower{} }
func (*LastValidatorPower) ProtoMessage() {}
func (*LastValidatorPower) Descriptor() ([]byte, []int) {
	return fileDescriptor_8143c6ee7ddaa59a, []int{1}
}
func (m *LastValidatorPower) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastValidatorPower) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastValidatorPower.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastValidatorPower) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastValidatorPower.Merge(m, src)
}
func (m *LastValidatorPower) XXX_Size() int {
	return m.Size()
}
func (m *LastValidatorPower) XXX_DiscardUnknown() {
	xxx_messageInfo_LastValidatorPower.DiscardUnknown(m)
}

var xxx_messageInfo_LastValidatorPower proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GenesisState)(nil), "validator.GenesisState")
	proto.RegisterType((*LastValidatorPower)(nil), "validator.LastValidatorPower")
}

func init() { proto.RegisterFile("validator/genesis.proto", fileDescriptor_8143c6ee7ddaa59a) }

var fileDescriptor_8143c6ee7ddaa59a = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xf5, 0x52, 0x9a, 0xa6, 0x9b, 0xd2, 0xd2, 0xa5, 0x50, 0x53, 0x81, 0x37, 0xf2, 0x01, 0xe5,
	0xd2, 0x58, 0x6a, 0x85, 0x84, 0x8a, 0x38, 0x60, 0xbe, 0x04, 0xe2, 0xa3, 0x32, 0x6d, 0x0f, 0x95,
	0x50, 0xb4, 0x89, 0x17, 0x63, 0xd5, 0xf6, 0x46, 0xde, 0x2d, 0xb4, 0x3f, 0x00, 0x09, 0x2e, 0x08,
	0x6e, 0x1c, 0xfb, 0x73, 0x7a, 0xec, 0x11, 0x71, 0x58, 0xa1, 0xe6, 0x82, 0x7c, 0xcc, 0x2f, 0x40,
	0xf6, 0x3a, 0xb6, 0x9b, 0xe4, 0xc0, 0x29, 0xde, 0xf7, 0x66, 0xde, 0x9b, 0x99, 0xec, 0x2c, 0x5c,
	0xfd, 0x48, 0x02, 0xdf, 0x25, 0x82, 0xc5, 0x96, 0x47, 0x23, 0xca, 0x7d, 0xde, 0xee, 0xc7, 0x4c,
	0x30, 0x34, 0x5f, 0x10, 0x6b, 0x2b, 0x1e, 0xf3, 0x58, 0x86, 0x5a, 0xe9, 0x97, 0x0a, 0x58, 0xbb,
	0x59, 0x66, 0x16, 0x5f, 0x39, 0xb5, 0x56, 0x52, 0x2e, 0x0d, 0xa8, 0x47, 0x84, 0xcf, 0xa2, 0x9c,
	0x33, 0xa6, 0x71, 0x9d, 0xe8, 0xbd, 0x50, 0xbc, 0x39, 0xac, 0xc1, 0x85, 0x67, 0xaa, 0x92, 0xb7,
	0x82, 0x08, 0x8a, 0x5e, 0xc0, 0xda, 0x36, 0x89, 0x49, 0xc8, 0x75, 0xd0, 0x04, 0xad, 0xc6, 0xc6,
	0x72, 0xbb, 0xb4, 0x53, 0x84, 0x8d, 0x4f, 0x25, 0xd6, 0x12, 0x89, 0x6b, 0xfd, 0xec, 0x3c, 0x94,
	0xf8, 0xca, 0x31, 0x09, 0x83, 0x2d, 0x53, 0x9d, 0x4d, 0x27, 0x57, 0x40, 0x9f, 0x01, 0x5c, 0x7c,
	0x49, 0xb8, 0xd8, 0x61, 0x82, 0x04, 0xdb, 0xec, 0x13, 0x8d, 0xf5, 0x4b, 0x4d, 0xd0, 0x9a, 0xb7,
	0xdf, 0xa5, 0x0a, 0xbf, 0x25, 0xbe, 0xe3, 0xf9, 0xe2, 0xc3, 0x61, 0xb7, 0xdd, 0x63, 0xa1, 0xd5,
	0x63, 0x3c, 0x64, 0x3c, 0xff, 0x59, 0xe7, 0xee, 0x81, 0x25, 0x8e, 0xfb, 0x94, 0xb7, 0x9f, 0x47,
	0x22, 0x91, 0xf8, 0x6a, 0x40, 0xb8, 0xe8, 0x88, 0x54, 0xa8, 0xd3, 0x4f, 0x95, 0x86, 0x12, 0xaf,
	0x2a, 0xd7, 0x71, 0xc6, 0x74, 0xc6, 0x4c, 0xd1, 0x37, 0x00, 0xaf, 0xa5, 0xd0, 0xde, 0xa8, 0x93,
	0x0c, 0xe6, 0xfa, 0x4c, 0x73, 0xa6, 0xd5, 0xd8, 0xb8, 0x5d, 0xe9, 0x70, 0x32, 0xca, 0x7e, 0x90,
	0x77, 0x7b, 0x3d, 0xf3, 0x29, 0x42, 0x95, 0x57, 0xda, 0xfc, 0xad, 0x4a, 0x19, 0xe3, 0xb4, 0xe9,
	0x4c, 0x33, 0x46, 0xbb, 0x10, 0x16, 0x10, 0xd7, 0x2f, 0x37, 0x41, 0x6b, 0xc1, 0xbe, 0x9b, 0xcf,
	0xa4, 0xc2, 0x24, 0x12, 0xc3, 0x42, 0x31, 0xb5, 0x5a, 0x56, 0x56, 0x25, 0x66, 0x3a, 0x95, 0x70,
	0xb4, 0x0f, 0x1b, 0x8f, 0x8b, 0x3f, 0x99, 0xeb, 0xb3, 0x99, 0xee, 0xbd, 0x5c, 0xb7, 0x4a, 0x25,
	0x12, 0x37, 0xca, 0xeb, 0x90, 0x2a, 0x23, 0xa5, 0x5c, 0x01, 0x4d, 0xa7, 0x9a, 0x81, 0x7e, 0x00,
	0xb8, 0xb2, 0x1b, 0x75, 0x59, 0xe4, 0xfa, 0x91, 0x57, 0x75, 0xa9, 0x65, 0x43, 0x34, 0x2a, 0x43,
	0x9c, 0x12, 0x56, 0x4e, 0xf1, 0x70, 0x44, 0x76, 0x2e, 0x16, 0x90, 0x4f, 0x71, 0x2a, 0x6d, 0x3a,
	0x53, 0xad, 0xd1, 0x01, 0x5c, 0xac, 0x1c, 0x5f, 0x3f, 0xdd, 0xd1, 0xe7, 0xb2, 0x96, 0x1f, 0xe5,
	0x2d, 0x8f, 0xb1, 0x89, 0xc4, 0x4b, 0x15, 0xd5, 0x74, 0x0b, 0x86, 0x12, 0xdf, 0x98, 0xe8, 0x3c,
	0x25, 0x4c, 0x67, 0x2c, 0x19, 0xdd, 0x87, 0xf5, 0x27, 0x47, 0x7d, 0x16, 0x0b, 0xea, 0xea, 0xf5,
	0x26, 0x68, 0xd5, 0x6d, 0x9c, 0x48, 0x5c, 0xa7, 0x39, 0x36, 0x94, 0x78, 0x49, 0x29, 0x8d, 0x10,
	0xd3, 0x29, 0x12, 0xb6, 0x16, 0xbe, 0x9c, 0x60, 0xed, 0xe7, 0x09, 0xd6, 0xfe, 0x9e, 0x60, 0xcd,
	0xfc, 0x0a, 0x20, 0x9a, 0xbc, 0x16, 0xe8, 0x0d, 0x9c, 0x7b, 0xe8, 0xba, 0x31, 0xe5, 0x6a, 0xf7,
	0xca, 0x2b, 0xb1, 0xfe, 0x1f, 0x6b, 0xb2, 0x47, 0x82, 0x3c, 0xd9, 0x19, 0xa9, 0xa0, 0x15, 0x38,
	0x5b, 0x6e, 0xdd, 0x8c, 0xa3, 0x0e, 0x17, 0x6b, 0xb1, 0x5f, 0x9d, 0x9e, 0x1b, 0xe0, 0xec, 0xdc,
	0x00, 0x7f, 0xce, 0x0d, 0xf0, 0x7d, 0x60, 0x68, 0x67, 0x03, 0x43, 0xfb, 0x35, 0x30, 0xb4, 0xfd,
	0xcd, 0xae, 0x2f, 0xba, 0x87, 0xbd, 0x03, 0x2a, 0xda, 0x2c, 0xf6, 0x2c, 0x97, 0xf6, 0xfc, 0x90,
	0x04, 0x82, 0x92, 0xd0, 0xf2, 0xd8, 0x7a, 0xc4, 0x5c, 0x6a, 0x1d, 0x95, 0x6f, 0x91, 0x2a, 0xa3,
	0x5b, 0xcb, 0x9e, 0x95, 0xcd, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x4b, 0x95, 0x8d, 0xe9,
	0x04, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exported {
		i--
		if m.Exported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.DelegationsNFT.Size()
		i -= size
		if _, err := m.DelegationsNFT.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.UnbondingDelegations) > 0 {
		for iNdEx := len(m.UnbondingDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size := m.Delegations.Size()
		i -= size
		if _, err := m.Delegations.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Validators.Size()
		i -= size
		if _, err := m.Validators.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.LastValidatorPowers) > 0 {
		for iNdEx := len(m.LastValidatorPowers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastValidatorPowers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.LastTotalPower.Size()
		i -= size
		if _, err := m.LastTotalPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LastValidatorPower) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastValidatorPower) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastValidatorPower) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.Address.Size()
		i -= size
		if _, err := m.Address.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.LastTotalPower.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.LastValidatorPowers) > 0 {
		for _, e := range m.LastValidatorPowers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.Validators.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.Delegations.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.UnbondingDelegations) > 0 {
		for _, e := range m.UnbondingDelegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.DelegationsNFT.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.Exported {
		n += 2
	}
	return n
}

func (m *LastValidatorPower) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Address.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.Power != 0 {
		n += 1 + sovGenesis(uint64(m.Power))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastTotalPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastTotalPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastValidatorPowers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastValidatorPowers = append(m.LastValidatorPowers, LastValidatorPower{})
			if err := m.LastValidatorPowers[len(m.LastValidatorPowers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validators.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingDelegations = append(m.UnbondingDelegations, UnbondingDelegation{})
			if err := m.UnbondingDelegations[len(m.UnbondingDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationsNFT", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationsNFT.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Exported = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastValidatorPower) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastValidatorPower: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastValidatorPower: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Address.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
